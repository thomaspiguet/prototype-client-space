import { first, get, isEmpty, map } from 'lodash';

import { getId, invertThreeStateOption } from '../utils/selectors/id';

import {
  ALL_YEARS_ENDPOINT,
  BUDGET_ACTUAL_ENDPOINT,
  BUDGET_DETAILS_ENDPOINT,
  BUDGET_OPTIONS_ENDPOINT,
  BUDGET_OTHER_ENDPOINT,
  BUDGET_REQUEST_BENEFITS_ENDPOINT,
  BUDGET_REQUEST_DISTRIBUTIONS_ENDPOINT,
  BUDGET_REQUEST_ENDPOINT,
  BUDGET_REQUEST_METADATA_ENDPOINT,
  BUDGET_SCENARIOS_ENDPOINT,
  BUDGET_SELECTED_ENDPOINT,
  DISTRIBUTION_EXPENSE_DEFAULT_ENDPOINT,
  DISTRIBUTION_EXPENSE_ENDPOINT,
  DISTRIBUTION_TEMPLATES_ENDPOINT,
  EMPLOYEES_ENDPOINT,
  FILTER_ELEMENTS_ENDPOINT,
  FILTER_ELEMENTS_KEYS_ENDPOINT,
  FUNCTIONAL_CENTERS_ENDPOINT,
  GENERAL_LEDGER_ACCOUNT_ENDPOINT,
  GLOBAL_PARAMETERS_ENDPOINT,
  GROUP_LEVEL_ENDPOINT,
  IMPORT_ENDPOINT,
  ORGANIZATIONS_ENDPOINT,
  ORIGIN_REPLACEMENTS_ENDPOINT,
  OTHER_EXPENSES_ENDPOINT,
  OTHER_EXPENSES_HISTORY_BY_ID_ENDPOINT,
  OTHER_EXPENSES_METADATA_ENDPOINT,
  OTHER_EXPENSES_RECALCULATE_ENDPOINT,
  REVENUE_AND_OTHER_EXPENSES_RECALCULATE_ENDPOINT,
  OTHER_RATES_ENDPOINT,
  OTHER_EXPENSES_DEFAULT_ENDPOINT,
  PARAMETERS_BY_STRUCTURE_ENDPOINT,
  PERIODS_ENDPOINT,
  POSITIONS_BY_JOB_TITLE_ENDPOINT,
  POSITIONS_ENDPOINT,
  REQUIRED_ATTENDANCE_BENEFITS_DAYS_ENDPOINT,
  REQUIRED_ATTENDANCE_COPY_ENDPOINT,
  REQUIRED_ATTENDANCE_COPY_METADATA_ENDPOINT,
  REQUIRED_ATTENDANCE_DASHBOARD_ENDPOINT,
  REQUIRED_ATTENDANCE_DEFAULT_ENDPOINT,
  REQUIRED_ATTENDANCE_ENDPOINT,
  REQUIRED_ATTENDANCE_LIST_METADATA_ENDPOINT,
  REQUIRED_ATTENDANCE_METADATA_ENDPOINT,
  REQUIRED_ATTENDANCE_PARAMETERS_ENDPOINT,
  REQUIRED_ATTENDANCE_TOTAL_HOURS_CALCULATION_ENDPOINT,
  RESPONSIBLE_ENDPOINT,
  USER_INFO_ENDPOINT,
  YEARS_BY_ORGANIZATIONS_ENDPOINT,
  DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED,
  DISTRIBUTION_EXPENSE_COPY_ENDPOINT,
  DISTRIBUTION_EXPENSE_COPY_METADATA_ENDPOINT,
  BUDGET_REQUEST_LIST_METADATA_ENDPOINT,
  DISTRIBUTION_EXPENSES_COPY_DEFAULT_EXPENSE_ENDPOINT,
  BUDGET_REQUEST_DEFAULT_ENDPOINT,
  REQUIRED_ATTENDANCE_QUERY_ENDPOINT,
  REQUIRED_ATTENDANCE_DASHBOARD_METADATA_ENDPOINT,
  REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_ENDPOINT,
  REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_ENDPOINT,
  CALCULATION_FOLLOW_UP_ENDPOINT,
  BUDGET_SCENARIO_COPY_METADATA_ENDPOINT,
  BUDGET_SCENARIO_COPY_ENDPOINT,
} from './endpoints';

import { FILTER_MODULE_KEY } from '../components/general/filter-dropdown/effects';
import { isEmptyObject, nullifyIfEmpty, omitUndefinedProps } from '../utils/utils';

export const SORTING_ASC = 'asc';
export const SORTING_DESC = 'desc';

export const DEFAULT_ENTITIES_PAGE_SIZE = 100;

export const GET_ORGANIZATIONS_REQUEST = 'GET_ORGANIZATIONS_REQUEST';
export const GET_ORGANIZATIONS_SUCCESS = 'GET_ORGANIZATIONS_SUCCESS';
export const GET_ORGANIZATIONS_FAILURE = 'GET_ORGANIZATIONS_FAILURE';

export const GET_ALL_YEARS_REQUEST = 'GET_ALL_YEARS_REQUEST';
export const GET_ALL_YEARS_SUCCESS = 'GET_ALL_YEARS_SUCCESS';
export const GET_ALL_YEARS_FAILURE = 'GET_ALL_YEARS_FAILURE';
export const GET_ORGANIZATIONS_YEARS_REQUEST = 'GET_ORGANIZATIONS_YEARS_REQUEST';
export const GET_ORGANIZATIONS_YEARS_SUCCESS = 'GET_ORGANIZATIONS_YEARS_SUCCESS';
export const GET_ORGANIZATIONS_YEARS_FAILURE = 'GET_ORGANIZATIONS_YEARS_FAILURE';

export const GET_ORGANIZATIONS_PERIODS_REQUEST = 'GET_ORGANIZATIONS_PERIODS_REQUEST';
export const GET_ORGANIZATIONS_PERIODS_SUCCESS = 'GET_ORGANIZATIONS_PERIODS_SUCCESS';
export const GET_ORGANIZATIONS_PERIODS_FAILURE = 'GET_ORGANIZATIONS_PERIODS_FAILURE';

export const GET_ORGANIZATION_YEAR_PERIODS_REQUEST = 'GET_ORGANIZATION_YEAR_PERIODS_REQUEST';
export const GET_ORGANIZATION_YEAR_PERIODS_SUCCESS = 'GET_ORGANIZATION_YEAR_PERIODS_SUCCESS';
export const GET_ORGANIZATION_YEAR_PERIODS_FAILURE = 'GET_ORGANIZATION_YEAR_PERIODS_FAILURE';

export const GET_INDEXATION_PERIODS_REQUEST = 'GET_INDEXATION_PERIODS_REQUEST';
export const GET_INDEXATION_PERIODS_SUCCESS = 'GET_INDEXATION_PERIODS_SUCCESS';
export const GET_INDEXATION_PERIODS_FAILURE = 'GET_INDEXATION_PERIODS_FAILURE';

export const GET_RESPONSIBLE_REQUEST = 'GET_RESPONSIBLE_REQUEST';
export const GET_RESPONSIBLE_SUCCESS = 'GET_RESPONSIBLE_SUCCESS';
export const GET_RESPONSIBLE_FAILURE = 'GET_RESPONSIBLE_FAILURE';
export const GET_FUNCTIONAL_CENTER_REQUEST = 'GET_FUNCTIONAL_CENTER_REQUEST';
export const GET_FUNCTIONAL_CENTER_SUCCESS = 'GET_FUNCTIONAL_CENTER_SUCCESS';
export const GET_FUNCTIONAL_CENTER_FAILURE = 'GET_FUNCTIONAL_CENTER_FAILURE';

export const BUDGET_OPTIONS_REQUEST = 'BUDGET_OPTIONS_REQUEST';
export const BUDGET_OPTIONS_SUCCESS = 'BUDGET_OPTIONS_SUCCESS';
export const BUDGET_OPTIONS_FAILURE = 'BUDGET_OPTIONS_FAILURE';

export const BUDGET_SELECTED_REQUEST = 'BUDGET_SELECTED_REQUEST';
export const BUDGET_SELECTED_SUCCESS = 'BUDGET_SELECTED_SUCCESS';
export const BUDGET_SELECTED_FAILURE = 'BUDGET_SELECTED_FAILURE';

export const BUDGET_OTHER_REQUEST = 'BUDGET_OTHER_REQUEST';
export const BUDGET_OTHER_SUCCESS = 'BUDGET_OTHER_SUCCESS';
export const BUDGET_OTHER_FAILURE = 'BUDGET_OTHER_FAILURE';

export const BUDGET_ACTUAL_PERIOD_REQUEST = 'BUDGET_ACTUAL_PERIOD_REQUEST';
export const BUDGET_ACTUAL_PERIOD_SUCCESS = 'BUDGET_ACTUAL_PERIOD_SUCCESS';
export const BUDGET_ACTUAL_PERIOD_FAILURE = 'BUDGET_ACTUAL_PERIOD_FAILURE';

export const BUDGET_SCENARIOS_REQUEST = 'BUDGET_SCENARIOS_REQUEST';
export const BUDGET_SCENARIOS_SUCCESS = 'BUDGET_SCENARIOS_SUCCESS';
export const BUDGET_SCENARIOS_FAILURE = 'BUDGET_SCENARIOS_FAILURE';

export const BUDGET_SCENARIO_COPY_METADATA_REQUEST = 'BUDGET_SCENARIO_COPY_METADATA_REQUEST';
export const BUDGET_SCENARIO_COPY_METADATA_SUCCESS = 'BUDGET_SCENARIO_COPY_METADATA_SUCCESS';
export const BUDGET_SCENARIO_COPY_METADATA_FAILURE = 'BUDGET_SCENARIO_COPY_METADATA_FAILURE';

export const BUDGET_SCENARIO_COPY_REQUEST = 'BUDGET_SCENARIO_COPY_REQUEST';
export const BUDGET_SCENARIO_COPY_SUCCESS = 'BUDGET_SCENARIO_COPY_SUCCESS';
export const BUDGET_SCENARIO_COPY_FAILURE = 'BUDGET_SCENARIO_COPY_FAILURE';

export const BUDGET_ACTUAL_YEAR_REQUEST = 'BUDGET_ACTUAL_YEAR_REQUEST';
export const BUDGET_ACTUAL_YEAR_SUCCESS = 'BUDGET_ACTUAL_YEAR_SUCCESS';
export const BUDGET_ACTUAL_YEAR_FAILURE = 'BUDGET_ACTUAL_YEAR_FAILURE';

export const BUDGET_DETAILS_REQUEST = 'BUDGET_DETAILS_REQUEST';
export const BUDGET_DETAILS_SUCCESS = 'BUDGET_DETAILS_SUCCESS';
export const BUDGET_DETAILS_FAILURE = 'BUDGET_DETAILS_FAILURE';

export const BUDGET_DETAILS_GROUPS_REQUEST = 'BUDGET_DETAILS_GROUPS_REQUEST';
export const BUDGET_DETAILS_GROUPS_SUCCESS = 'BUDGET_DETAILS_GROUPS_SUCCESS';
export const BUDGET_DETAILS_GROUPS_FAILURE = 'BUDGET_DETAILS_GROUPS_FAILURE';

export const BUDGET_FILTER_VALUES_REQUEST = 'BUDGET_FILTER_VALUES_REQUEST';
export const BUDGET_FILTER_VALUES_SUCCESS = 'BUDGET_FILTER_VALUES_SUCCESS';
export const BUDGET_FILTER_VALUES_FAILURE = 'BUDGET_FILTER_VALUES_FAILURE';

export const BUDGET_DETAILS_REPORT_REQUEST = 'BUDGET_DETAILS_REPORT_REQUEST';
export const BUDGET_DETAILS_REPORT_SUCCESS = 'BUDGET_DETAILS_REPORT_SUCCESS';
export const BUDGET_DETAILS_REPORT_FAILURE = 'BUDGET_DETAILS_REPORT_FAILURE';

export const BUDGET_DETAILS_ORIGIN_REQUEST = 'BUDGET_DETAILS_ORIGIN_REQUEST';
export const BUDGET_DETAILS_ORIGIN_SUCCESS = 'BUDGET_DETAILS_ORIGIN_SUCCESS';
export const BUDGET_DETAILS_ORIGIN_FAILURE = 'BUDGET_DETAILS_ORIGIN_FAILURE';

export const BUDGET_DETAILS_ORIGIN_REPORT_REQUEST = 'BUDGET_DETAILS_ORIGIN_REPORT_REQUEST';
export const BUDGET_DETAILS_ORIGIN_REPORT_SUCCESS = 'BUDGET_DETAILS_ORIGIN_REPORT_SUCCESS';
export const BUDGET_DETAILS_ORIGIN_REPORT_FAILURE = 'BUDGET_DETAILS_ORIGIN_REPORT_FAILURE';

export const CALCULATION_FOLLOW_UP_REQUEST = 'CALCULATION_FOLLOW_UP_REQUEST';
export const CALCULATION_FOLLOW_UP_SUCCESS = 'CALCULATION_FOLLOW_UP_SUCCESS';
export const CALCULATION_FOLLOW_UP_FAILURE = 'CALCULATION_FOLLOW_UP_FAILURE';

export const CALCULATION_FOLLOW_UP_DETAILS_REQUEST = 'CALCULATION_FOLLOW_UP_DETAILS_REQUEST';
export const CALCULATION_FOLLOW_UP_DETAILS_SUCCESS = 'CALCULATION_FOLLOW_UP_DETAILS_SUCCESS';
export const CALCULATION_FOLLOW_UP_DETAILS_FAILURE = 'CALCULATION_FOLLOW_UP_DETAILS_FAILURE';

export const USER_INFO_REQUEST = 'USER_INFO_REQUEST';
export const USER_INFO_SUCCESS = 'USER_INFO_SUCCESS';
export const USER_INFO_FAILURE = 'USER_INFO_FAILURE';

export const GET_FILTER_ELEMENTS_KEYS_REQUEST = 'GET_FILTER_ELEMENTS_KEYS_REQUEST';
export const GET_FILTER_ELEMENTS_KEYS_SUCCESS = 'GET_FILTER_ELEMENTS_KEYS_SUCCESS';
export const GET_FILTER_ELEMENTS_KEYS_FAILURE = 'GET_FILTER_ELEMENTS_KEYS_FAILURE';

export const GET_FILTER_ELEMENTS_REQUEST = 'GET_FILTER_ELEMENTS_REQUEST';
export const GET_FILTER_ELEMENTS_SUCCESS = 'GET_FILTER_ELEMENTS_SUCCESS';
export const GET_FILTER_ELEMENTS_FAILURE = 'GET_FILTER_ELEMENTS_FAILURE';

export const POSITIONS_REQUEST = 'POSITIONS_REQUEST';
export const POSITIONS_SUCCESS = 'POSITIONS_SUCCESS';
export const POSITIONS_FAILURE = 'POSITIONS_FAILURE';

export const REQUIRED_ATTENDANCES_REQUEST = 'REQUIRED_ATTENDANCES_REQUEST';
export const REQUIRED_ATTENDANCES_SUCCESS = 'REQUIRED_ATTENDANCES_SUCCESS';
export const REQUIRED_ATTENDANCES_FAILURE = 'REQUIRED_ATTENDANCES_FAILURE';

export const REQUIRED_ATTENDANCE_REQUEST = 'REQUIRED_ATTENDANCE_REQUEST';
export const REQUIRED_ATTENDANCE_SUCCESS = 'REQUIRED_ATTENDANCE_SUCCESS';
export const REQUIRED_ATTENDANCE_FAILURE = 'REQUIRED_ATTENDANCE_FAILURE';

export const REQUIRED_ATTENDANCE_REFERENCES_REQUEST = 'REQUIRED_ATTENDANCE_REFERENCES_REQUEST';
export const REQUIRED_ATTENDANCE_REFERENCES_SUCCESS = 'REQUIRED_ATTENDANCE_REFERENCES_SUCCESS';
export const REQUIRED_ATTENDANCE_REFERENCES_FAILURE = 'REQUIRED_ATTENDANCE_REFERENCES_FAILURE';

export const REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_REQUEST = 'REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_REQUEST';
export const REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_SUCCESS = 'REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_SUCCESS';
export const REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_FAILURE = 'REQUIRED_ATTENDANCE_DEFAULT_REFERENCE_FAILURE';

export const REQUIRED_ATTENDANCE_SAVE_REQUEST = 'REQUIRED_ATTENDANCE_SAVE_REQUEST';
export const REQUIRED_ATTENDANCE_SAVE_SUCCESS = 'REQUIRED_ATTENDANCE_SAVE_SUCCESS';
export const REQUIRED_ATTENDANCE_SAVE_FAILURE = 'REQUIRED_ATTENDANCE_SAVE_FAILURE';

export const REQUIRED_ATTENDANCE_CREATE_REQUEST = 'REQUIRED_ATTENDANCE_CREATE_REQUEST';
export const REQUIRED_ATTENDANCE_CREATE_SUCCESS = 'REQUIRED_ATTENDANCE_CREATE_SUCCESS';
export const REQUIRED_ATTENDANCE_CREATE_FAILURE = 'REQUIRED_ATTENDANCE_CREATE_FAILURE';

export const REQUIRED_ATTENDANCE_COPY_REQUEST = 'REQUIRED_ATTENDANCE_COPY_REQUEST';
export const REQUIRED_ATTENDANCE_COPY_SUCCESS = 'REQUIRED_ATTENDANCE_COPY_SUCCESS';
export const REQUIRED_ATTENDANCE_COPY_FAILURE = 'REQUIRED_ATTENDANCE_COPY_FAILURE';

export const REQUIRED_ATTENDANCE_DELETE_REQUEST = 'REQUIRED_ATTENDANCE_DELETE_REQUEST';
export const REQUIRED_ATTENDANCE_DELETE_SUCCESS = 'REQUIRED_ATTENDANCE_DELETE_SUCCESS';
export const REQUIRED_ATTENDANCE_DELETE_FAILURE = 'REQUIRED_ATTENDANCE_DELETE_FAILURE';

export const REQUIRED_ATTENDANCE_METADATA_REQUEST = 'REQUIRED_ATTENDANCE_METADATA_REQUEST';
export const REQUIRED_ATTENDANCE_METADATA_SUCCESS = 'REQUIRED_ATTENDANCE_METADATA_SUCCESS';
export const REQUIRED_ATTENDANCE_METADATA_FAILURE = 'REQUIRED_ATTENDANCE_METADATA_FAILURE';

export const REQUIRED_ATTENDANCE_LIST_METADATA_REQUEST = 'REQUIRED_ATTENDANCE_LIST_METADATA_REQUEST';
export const REQUIRED_ATTENDANCE_LIST_METADATA_SUCCESS = 'REQUIRED_ATTENDANCE_LIST_METADATA_SUCCESS';
export const REQUIRED_ATTENDANCE_LIST_METADATA_FAILURE = 'REQUIRED_ATTENDANCE_LIST_METADATA_FAILURE';

export const REQUIRED_ATTENDANCE_COPY_METADATA_REQUEST = 'REQUIRED_ATTENDANCE_COPY_METADATA_REQUEST';
export const REQUIRED_ATTENDANCE_COPY_METADATA_SUCCESS = 'REQUIRED_ATTENDANCE_COPY_METADATA_SUCCESS';
export const REQUIRED_ATTENDANCE_COPY_METADATA_FAILURE = 'REQUIRED_ATTENDANCE_COPY_METADATA_FAILURE';

export const REQUIRED_ATTENDANCE_QUERY_REQUEST = 'REQUIRED_ATTENDANCE_QUERY_REQUEST';
export const REQUIRED_ATTENDANCE_QUERY_SUCCESS = 'REQUIRED_ATTENDANCE_QUERY_SUCCESS';
export const REQUIRED_ATTENDANCE_QUERY_FAILURE = 'REQUIRED_ATTENDANCE_QUERY_FAILURE';

export const REQUIRED_ATTENDANCE_DEFAULT_REQUEST = 'REQUIRED_ATTENDANCE_DEFAULT_REQUEST';
export const REQUIRED_ATTENDANCE_DEFAULT_SUCCESS = 'REQUIRED_ATTENDANCE_DEFAULT_SUCCESS';
export const REQUIRED_ATTENDANCE_DEFAULT_FAILURE = 'REQUIRED_ATTENDANCE_DEFAULT_FAILURE';

export const REQUIRED_ATTENDANCE_DASHBOARD_REQUEST = 'REQUIRED_ATTENDANCE_DASHBOARD_REQUEST';
export const REQUIRED_ATTENDANCE_DASHBOARD_SUCCESS = 'REQUIRED_ATTENDANCE_DASHBOARD_SUCCESS';
export const REQUIRED_ATTENDANCE_DASHBOARD_FAILURE = 'REQUIRED_ATTENDANCE_DASHBOARD_FAILURE';

export const REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_REQUEST = 'REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_REQUEST';
export const REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_SUCCESS = 'REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_SUCCESS';
export const REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_FAILURE = 'REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_FAILURE';

export const REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_REQUEST = 'REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_REQUEST';
export const REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_SUCCESS = 'REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_SUCCESS';
export const REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_FAILURE = 'REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_FAILURE';

export const REQUIRED_ATTENDANCE_DASHBOARD_METADATA_REQUEST = 'REQUIRED_ATTENDANCE_DASHBOARD_METADATA_REQUEST';
export const REQUIRED_ATTENDANCE_DASHBOARD_METADATA_SUCCESS = 'REQUIRED_ATTENDANCE_DASHBOARD_METADATA_SUCCESS';
export const REQUIRED_ATTENDANCE_DASHBOARD_METADATA_FAILURE = 'REQUIRED_ATTENDANCE_DASHBOARD_METADATA_FAILURE';

export const REQUIRED_ATTENDANCE_DASHBOARD_SAVE_REQUEST = 'REQUIRED_ATTENDANCE_DASHBOARD_SAVE_REQUEST';
export const REQUIRED_ATTENDANCE_DASHBOARD_SAVE_SUCCESS = 'REQUIRED_ATTENDANCE_DASHBOARD_SAVE_SUCCESS';
export const REQUIRED_ATTENDANCE_DASHBOARD_SAVE_FAILURE = 'REQUIRED_ATTENDANCE_DASHBOARD_SAVE_FAILURE';

export const REQUIRED_ATTENDANCE_PARAMETERS_REQUEST = 'REQUIRED_ATTENDANCE_PARAMETERS_REQUEST';
export const REQUIRED_ATTENDANCE_PARAMETERS_SUCCESS = 'REQUIRED_ATTENDANCE_PARAMETERS_SUCCESS';
export const REQUIRED_ATTENDANCE_PARAMETERS_FAILURE = 'REQUIRED_ATTENDANCE_PARAMETERS_FAILURE';

export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_REQUEST = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_REQUEST';
export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_SUCCESS = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_SUCCESS';
export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_FAILURE = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_FAILURE';

export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_REQUEST = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_REQUEST';
export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_SUCCESS = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_SUCCESS';
export const REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_FAILURE = 'REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_FAILURE';

export const REVENUE_AND_OTHER_EXPENSES_REQUEST = 'REVENUE_AND_OTHER_EXPENSES_REQUEST';
export const REVENUE_AND_OTHER_EXPENSES_SUCCESS = 'REVENUE_AND_OTHER_EXPENSES_SUCCESS';
export const REVENUE_AND_OTHER_EXPENSES_FAILURE = 'REVENUE_AND_OTHER_EXPENSES_FAILURE';

export const DISTRIBUTION_EXPENSE_REQUEST = 'DISTRIBUTION_EXPENSE_REQUEST';
export const DISTRIBUTION_EXPENSE_SUCCESS = 'DISTRIBUTION_EXPENSE_SUCCESS';
export const DISTRIBUTION_EXPENSE_FAILURE = 'DISTRIBUTION_EXPENSE_FAILURE';

export const DISTRIBUTION_EXPENSE_RECALCULATE_REQUEST = 'DISTRIBUTION_EXPENSE_RECALCULATE_REQUEST';
export const DISTRIBUTION_EXPENSE_RECALCULATE_SUCCESS = 'DISTRIBUTION_EXPENSE_RECALCULATE_SUCCESS';
export const DISTRIBUTION_EXPENSE_RECALCULATE_FAILURE = 'DISTRIBUTION_EXPENSE_RECALCULATE_FAILURE';

export const DISTRIBUTION_EXPENSE_METADATA_REQUEST = 'DISTRIBUTION_EXPENSE_METADATA_REQUEST';
export const DISTRIBUTION_EXPENSE_METADATA_SUCCESS = 'DISTRIBUTION_EXPENSE_METADATA_SUCCESS';
export const DISTRIBUTION_EXPENSE_METADATA_FAILURE = 'DISTRIBUTION_EXPENSE_METADATA_FAILURE';

export const DISTRIBUTION_EXPENSE_SAVE_REQUEST = 'DISTRIBUTION_EXPENSE_SAVE_REQUEST';
export const DISTRIBUTION_EXPENSE_SAVE_SUCCESS = 'DISTRIBUTION_EXPENSE_SAVE_SUCCESS';
export const DISTRIBUTION_EXPENSE_SAVE_FAILURE = 'DISTRIBUTION_EXPENSE_SAVE_FAILURE';

export const DISTRIBUTION_EXPENSE_CREATE_REQUEST = 'DISTRIBUTION_EXPENSE_CREATE_REQUEST';
export const DISTRIBUTION_EXPENSE_CREATE_SUCCESS = 'DISTRIBUTION_EXPENSE_CREATE_SUCCESS';
export const DISTRIBUTION_EXPENSE_CREATE_FAILURE = 'DISTRIBUTION_EXPENSE_CREATE_FAILURE';

export const DISTRIBUTION_EXPENSE_DEFAULT_REQUEST = 'DISTRIBUTION_EXPENSE_DEFAULT_REQUEST';
export const DISTRIBUTION_EXPENSE_DEFAULT_SUCCESS = 'DISTRIBUTION_EXPENSE_DEFAULT_SUCCESS';
export const DISTRIBUTION_EXPENSE_DEFAULT_FAILURE = 'DISTRIBUTION_EXPENSE_DEFAULT_FAILURE';

export const DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_REQUEST = 'DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_REQUEST';
export const DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_SUCCESS = 'DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_SUCCESS';
export const DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_FAILURE = 'DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_FAILURE';

export const POSITION_REQUEST = 'POSITION_REQUEST';
export const POSITION_SUCCESS = 'POSITION_SUCCESS';
export const POSITION_FAILURE = 'POSITION_FAILURE';

export const EMPLOYEE_REQUEST = 'EMPLOYEE_REQUEST';
export const EMPLOYEE_SUCCESS = 'EMPLOYEE_SUCCESS';
export const EMPLOYEE_FAILURE = 'EMPLOYEE_FAILURE';

export const GET_PRODUCTS_REGISTRY_REQUEST = 'GET_PRODUCTS_REGISTRY_REQUEST';
export const GET_PRODUCTS_REGISTRY_SUCCESS = 'GET_PRODUCTS_REGISTRY_SUCCESS';
export const GET_PRODUCTS_REGISTRY_FAILURE = 'GET_PRODUCTS_REGISTRY_FAILURE';

export const POSITIONS_BY_JOB_TITLE_REQUEST = 'POSITIONS_BY_JOB_TITLE_REQUEST';
export const POSITIONS_BY_JOB_TITLE_SUCCESS = 'POSITIONS_BY_JOB_TITLE_SUCCESS';
export const POSITIONS_BY_JOB_TITLE_FAILURE = 'POSITIONS_BY_JOB_TITLE_FAILURE';

export const POSITION_BY_JOB_TITLE_REQUEST = 'POSITION_BY_JOB_TITLE_REQUEST';
export const POSITION_BY_JOB_TITLE_SUCCESS = 'POSITION_BY_JOB_TITLE_SUCCESS';
export const POSITION_BY_JOB_TITLE_FAILURE = 'POSITION_BY_JOB_TITLE_FAILURE';

export const BUDGET_REQUESTS_REQUEST = 'BUDGET_REQUESTS_REQUEST';
export const BUDGET_REQUESTS_SUCCESS = 'BUDGET_REQUESTS_SUCCESS';
export const BUDGET_REQUESTS_FAILURE = 'BUDGET_REQUESTS_FAILURE';

export const BUDGET_REQUEST_REQUEST = 'BUDGET_REQUEST_REQUEST';
export const BUDGET_REQUEST_SUCCESS = 'BUDGET_REQUEST_SUCCESS';
export const BUDGET_REQUEST_FAILURE = 'BUDGET_REQUEST_FAILURE';

export const BUDGET_REQUEST_SAVE_REQUEST = 'BUDGET_REQUEST_SAVE_REQUEST';
export const BUDGET_REQUEST_SAVE_SUCCESS = 'BUDGET_REQUEST_SAVE_SUCCESS';
export const BUDGET_REQUEST_SAVE_FAILURE = 'BUDGET_REQUEST_SAVE_FAILURE';

export const BUDGET_REQUEST_CREATE_REQUEST = 'BUDGET_REQUEST_CREATE_REQUEST';
export const BUDGET_REQUEST_CREATE_SUCCESS = 'BUDGET_REQUEST_CREATE_SUCCESS';
export const BUDGET_REQUEST_CREATE_FAILURE = 'BUDGET_REQUEST_CREATE_FAILURE';

export const BUDGET_REQUEST_METADATA_REQUEST = 'BUDGET_REQUEST_METADATA_REQUEST';
export const BUDGET_REQUEST_METADATA_SUCCESS = 'BUDGET_REQUEST_METADATA_SUCCESS';
export const BUDGET_REQUEST_METADATA_FAILURE = 'BUDGET_REQUEST_METADATA_FAILURE';

export const BUDGET_REQUEST_LIST_METADATA_REQUEST = 'BUDGET_REQUEST_LIST_METADATA_REQUEST';
export const BUDGET_REQUEST_LIST_METADATA_SUCCESS = 'BUDGET_REQUEST_LIST_METADATA_SUCCESS';
export const BUDGET_REQUEST_LIST_METADATA_FAILURE = 'BUDGET_REQUEST_LIST_METADATA_FAILURE';

export const BUDGET_REQUEST_DEFAULT_REQUEST = 'BUDGET_REQUEST_DEFAULT_REQUEST';
export const BUDGET_REQUEST_DEFAULT_SUCCESS = 'BUDGET_REQUEST_DEFAULT_SUCCESS';
export const BUDGET_REQUEST_DEFAULT_FAILURE = 'BUDGET_REQUEST_DEFAULT_FAILURE';

export const BUDGET_REQUEST_TOTALS_REQUEST = 'BUDGET_REQUEST_TOTALS_REQUEST';
export const BUDGET_REQUEST_TOTALS_SUCCESS = 'BUDGET_REQUEST_TOTALS_SUCCESS';
export const BUDGET_REQUEST_TOTALS_FAILURE = 'BUDGET_REQUEST_TOTALS_FAILURE';

export const BUDGET_REQUEST_DELETE_REQUEST = 'BUDGET_REQUEST_DELETE_REQUEST';
export const BUDGET_REQUEST_DELETE_SUCCESS = 'BUDGET_REQUEST_DELETE_SUCCESS';
export const BUDGET_REQUEST_DELETE_FAILURE = 'BUDGET_REQUEST_DELETE_FAILURE';

export const BUDGET_REQUEST_FTE_CALCULATION_REQUEST = 'BUDGET_REQUEST_FTE_CALCULATION_REQUEST';
export const BUDGET_REQUEST_FTE_CALCULATION_SUCCESS = 'BUDGET_REQUEST_FTE_CALCULATION_SUCCESS';
export const BUDGET_REQUEST_FTE_CALCULATION_FAILURE = 'BUDGET_REQUEST_FTE_CALCULATION_FAILURE';

export const OTHER_EXPENSES_REQUEST = 'OTHER_EXPENSES_REQUEST';
export const OTHER_EXPENSES_SUCCESS = 'OTHER_EXPENSES_SUCCESS';
export const OTHER_EXPENSES_FAILURE = 'OTHER_EXPENSES_FAILURE';

export const OTHER_EXPENSES_METADATA_REQUEST = 'OTHER_EXPENSES_METADATA_REQUEST';
export const OTHER_EXPENSES_METADATA_SUCCESS = 'OTHER_EXPENSES_METADATA_SUCCESS';
export const OTHER_EXPENSES_METADATA_FAILURE = 'OTHER_EXPENSES_METADATA_FAILURE';

export const OTHER_EXPENSES_ACTUAL_DETAILS_REQUEST = 'OTHER_EXPENSES_ACTUAL_DETAILS_REQUEST';
export const OTHER_EXPENSES_ACTUAL_DETAILS_SUCCESS = 'OTHER_EXPENSES_ACTUAL_DETAILS_SUCCESS';
export const OTHER_EXPENSES_ACTUAL_DETAILS_FAILURE = 'OTHER_EXPENSES_ACTUAL_DETAILS_FAILURE';

export const OTHER_EXPENSES_BUDGET_DETAILS_REQUEST = 'OTHER_EXPENSES_BUDGET_DETAILS_REQUEST';
export const OTHER_EXPENSES_BUDGET_DETAILS_SUCCESS = 'OTHER_EXPENSES_BUDGET_DETAILS_SUCCESS';
export const OTHER_EXPENSES_BUDGET_DETAILS_FAILURE = 'OTHER_EXPENSES_BUDGET_DETAILS_FAILURE';

export const OTHER_EXPENSES_HISTORY_DETAILS_REQUEST = 'OTHER_EXPENSES_HISTORY_DETAILS_REQUEST';
export const OTHER_EXPENSES_HISTORY_DETAILS_SUCCESS = 'OTHER_EXPENSES_HISTORY_DETAILS_SUCCESS';
export const OTHER_EXPENSES_HISTORY_DETAILS_FAILURE = 'OTHER_EXPENSES_HISTORY_DETAILS_FAILURE';

export const OTHER_EXPENSES_SAVE_HISTORY_REQUEST = 'OTHER_EXPENSES_SAVE_HISTORY_REQUEST';
export const OTHER_EXPENSES_SAVE_HISTORY_SUCCESS = 'OTHER_EXPENSES_SAVE_HISTORY_SUCCESS';
export const OTHER_EXPENSES_SAVE_HISTORY_FAILURE = 'OTHER_EXPENSES_SAVE_HISTORY_FAILURE';

export const OTHER_EXPENSES_CANCEL_HISTORY_REQUEST = 'OTHER_EXPENSES_CANCEL_HISTORY_REQUEST';

export const OTHER_EXPENSES_CALCULATE_HISTORY_REQUEST = 'OTHER_EXPENSES_CALCULATE_HISTORY_REQUEST';
export const OTHER_EXPENSES_CALCULATE_HISTORY_SUCCESS = 'OTHER_EXPENSES_CALCULATE_HISTORY_SUCCESS';
export const OTHER_EXPENSES_CALCULATE_HISTORY_FAILURE = 'OTHER_EXPENSES_CALCULATE_HISTORY_FAILURE';

export const OTHER_EXPENSES_HISTORY_METADATA_REQUEST = 'OTHER_EXPENSES_HISTORY_METADATA_REQUEST';
export const OTHER_EXPENSES_HISTORY_METADATA_SUCCESS = 'OTHER_EXPENSES_HISTORY_METADATA_SUCCESS';
export const OTHER_EXPENSES_HISTORY_METADATA_FAILURE = 'OTHER_EXPENSES_HISTORY_METADATA_FAILURE';

export const OTHER_EXPENSES_SAVE_REQUEST = 'OTHER_EXPENSES_SAVE_REQUEST';
export const OTHER_EXPENSES_SAVE_SUCCESS = 'OTHER_EXPENSES_SAVE_SUCCESS';
export const OTHER_EXPENSES_SAVE_FAILURE = 'OTHER_EXPENSES_SAVE_FAILURE';

export const OTHER_EXPENSES_DELETE_REQUEST = 'OTHER_EXPENSES_DELETE_REQUEST';
export const OTHER_EXPENSES_DELETE_SUCCESS = 'OTHER_EXPENSES_DELETE_SUCCESS';
export const OTHER_EXPENSES_DELETE_FAILURE = 'OTHER_EXPENSES_DELETE_FAILURE';

export const OTHER_EXPENSES_RESERVE_ACCOUNT = 'OTHER_EXPENSES_RESERVE_ACCOUNT';

export const REVENUE_AND_OTHER_EXPENSES_CREATE_REQUEST = 'REVENUE_AND_OTHER_EXPENSES_CREATE_REQUEST';
export const REVENUE_AND_OTHER_EXPENSES_CREATE_SUCCESS = 'REVENUE_AND_OTHER_EXPENSES_CREATE_SUCCESS';
export const REVENUE_AND_OTHER_EXPENSES_CREATE_FAILURE = 'REVENUE_AND_OTHER_EXPENSES_CREATE_FAILURE';

export const REVENUE_AND_OTHER_EXPENSES_DEFAULT_REQUEST = 'REVENUE_AND_OTHER_EXPENSES_DEFAULT_REQUEST';
export const REVENUE_AND_OTHER_EXPENSES_DEFAULT_SUCCESS = 'REVENUE_AND_OTHER_EXPENSES_DEFAULT_SUCCESS';
export const REVENUE_AND_OTHER_EXPENSES_DEFAULT_FAILURE = 'REVENUE_AND_OTHER_EXPENSES_DEFAULT_FAILURE';

export const REVENUE_AND_OTHER_EXPENSES_METADATA_REQUEST = 'REVENUE_AND_OTHER_EXPENSES_METADATA_REQUEST';
export const REVENUE_AND_OTHER_EXPENSES_METADATA_SUCCESS = 'REVENUE_AND_OTHER_EXPENSES_METADATA_SUCCESS';
export const REVENUE_AND_OTHER_EXPENSES_METADATA_FAILURE = 'REVENUE_AND_OTHER_EXPENSES_METADATA_FAILURE';

export const REVENUE_AND_OTHER_EXPENSES_RECALCULATE_REQUEST = 'REVENUE_AND_OTHER_EXPENSES_RECALCULATE_REQUEST';
export const REVENUE_AND_OTHER_EXPENSES_RECALCULATE_SUCCESS = 'REVENUE_AND_OTHER_EXPENSES_RECALCULATE_SUCCESS';
export const REVENUE_AND_OTHER_EXPENSES_RECALCULATE_FAILURE = 'REVENUE_AND_OTHER_EXPENSES_RECALCULATE_FAILURE';

export const IMPORTS_REQUEST = 'IMPORTS_REQUEST';
export const IMPORTS_SUCCESS = 'IMPORTS_SUCCESS';
export const IMPORTS_FAILURE = 'IMPORTS_FAILURE';

export const IMPORT_REQUEST = 'IMPORT_REQUEST';
export const IMPORT_SUCCESS = 'IMPORT_SUCCESS';
export const IMPORT_FAILURE = 'IMPORT_FAILURE';

export const IMPORT_ACCOUNTS_REQUEST = 'IMPORT_ACCOUNTS_REQUEST';
export const IMPORT_ACCOUNTS_SUCCESS = 'IMPORT_ACCOUNTS_SUCCESS';
export const IMPORT_ACCOUNTS_FAILURE = 'IMPORT_ACCOUNTS_FAILURE';

export const IMPORT_ACCOUNT_DETAILS_REQUEST = 'IMPORT_ACCOUNT_DETAILS_REQUEST';
export const IMPORT_ACCOUNT_DETAILS_SUCCESS = 'IMPORT_ACCOUNT_DETAILS_SUCCESS';
export const IMPORT_ACCOUNT_DETAILS_FAILURE = 'IMPORT_ACCOUNT_DETAILS_FAILURE';

export const IMPORT_ACCOUNT_REQUEST = 'IMPORT_ACCOUNT_REQUEST';
export const IMPORT_ACCOUNT_SUCCESS = 'IMPORT_ACCOUNT_SUCCESS';
export const IMPORT_ACCOUNT_FAILURE = 'IMPORT_ACCOUNT_FAILURE';

export const IMPORT_OTHER_SCENARIOS_REQUEST = 'IMPORT_OTHER_SCENARIOS_REQUEST';
export const IMPORT_OTHER_SCENARIOS_SUCCESS = 'IMPORT_OTHER_SCENARIOS_SUCCESS';
export const IMPORT_OTHER_SCENARIOS_FAILURE = 'IMPORT_OTHER_SCENARIOS_FAILURE';

export const IMPORT_OTHER_SCENARIO_REQUEST = 'IMPORT_OTHER_SCENARIO_REQUEST';
export const IMPORT_OTHER_SCENARIO_SUCCESS = 'IMPORT_OTHER_SCENARIO_SUCCESS';
export const IMPORT_OTHER_SCENARIO_FAILURE = 'IMPORT_OTHER_SCENARIO_FAILURE';

export const PARAMETERS_BY_STRUCTURE_REQUEST = 'PARAMETERS_BY_STRUCTURE_REQUEST';
export const PARAMETERS_BY_STRUCTURE_SUCCESS = 'PARAMETERS_BY_STRUCTURE_SUCCESS';
export const PARAMETERS_BY_STRUCTURE_FAILURE = 'PARAMETERS_BY_STRUCTURE_FAILURE';

export const PARAMETER_BY_STRUCTURE_REQUEST = 'PARAMETER_BY_STRUCTURE_REQUEST';
export const PARAMETER_BY_STRUCTURE_SUCCESS = 'PARAMETER_BY_STRUCTURE_SUCCESS';
export const PARAMETER_BY_STRUCTURE_FAILURE = 'PARAMETER_BY_STRUCTURE_FAILURE';

export const GLOBAL_PARAMETERS_REQUEST = 'GLOBAL_PARAMETERS_REQUEST';
export const GLOBAL_PARAMETERS_SUCCESS = 'GLOBAL_PARAMETERS_SUCCESS';
export const GLOBAL_PARAMETERS_FAILURE = 'GLOBAL_PARAMETERS_FAILURE';

export const GROUP_TYPE_REQUEST = 'GROUP_TYPE_REQUEST';
export const GROUP_TYPE_SUCCESS = 'GROUP_TYPE_SUCCESS';
export const GROUP_TYPE_FAILURE = 'GROUP_TYPE_FAILURE';

export const ENTITIES_REQUEST = 'ENTITIES_REQUEST';
export const ENTITIES_SUCCESS = 'ENTITIES_SUCCESS';
export const ENTITIES_FAILURE = 'ENTITIES_FAILURE';

export const REQUIRED_ATTENDANCE_TOTAL_HOURS_REQUEST = 'REQUIRED_ATTENDANCE_TOTAL_HOURS_REQUEST';
export const REQUIRED_ATTENDANCE_TOTAL_HOURS_SUCCESS = 'REQUIRED_ATTENDANCE_TOTAL_HOURS_SUCCESS';
export const REQUIRED_ATTENDANCE_TOTAL_HOURS_FAILURE = 'REQUIRED_ATTENDANCE_TOTAL_HOURS_FAILURE';

export const REQUIRED_ATTENDANCE_BENEFITS_DAYS_REQUEST = 'REQUIRED_ATTENDANCE_BENEFITS_DAYS_REQUEST';
export const REQUIRED_ATTENDANCE_BENEFITS_DAYS_SUCCESS = 'REQUIRED_ATTENDANCE_BENEFITS_DAYS_SUCCESS';
export const REQUIRED_ATTENDANCE_BENEFITS_DAYS_FAILURE = 'REQUIRED_ATTENDANCE_BENEFITS_DAYS_FAILURE';

export const REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_REQUEST = 'REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_REQUEST';
export const REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_SUCCESS = 'REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_SUCCESS';
export const REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_FAILURE = 'REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_FAILURE';

export const BUDGET_REQUEST_BENEFITS_REQUEST = 'BUDGET_REQUEST_BENEFITS_REQUEST';
export const BUDGET_REQUEST_BENEFITS_SUCCESS = 'BUDGET_REQUEST_BENEFITS_SUCCESS';
export const BUDGET_REQUEST_BENEFITS_FAILURE = 'BUDGET_REQUEST_BENEFITS_FAILURE';

export const OTHER_RATES_REQUEST = 'OTHER_RATES_REQUEST';
export const OTHER_RATES_SUCCESS = 'OTHER_RATES_SUCCESS';
export const OTHER_RATES_FAILURE = 'OTHER_RATES_FAILURE';

export const GROUP_LEVEL_REQUEST = 'GROUP_LEVEL_REQUEST';
export const GROUP_LEVEL_SUCCESS = 'GROUP_LEVEL_SUCCESS';
export const GROUP_LEVEL_FAILURE = 'GROUP_LEVEL_FAILURE';

export const GET_SUGGESSTED_HOURLY_RATE_REQUEST = 'GET_SUGGESSTED_HOURLY_RATE_REQUEST';
export const GET_SUGGESSTED_HOURLY_RATE_SUCCESS = 'GET_SUGGESSTED_HOURLY_RATE_SUCCESS';
export const GET_SUGGESSTED_HOURLY_RATE_FAILURE = 'GET_SUGGESSTED_HOURLY_RATE_FAILURE';

export const GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_REQUEST = 'GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_REQUEST';
export const GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_SUCCESS = 'GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_SUCCESS';
export const GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_FAILURE = 'GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_FAILURE';

export const ORIGIN_REPLACEMENTS_REQUEST = 'ORIGIN_REPLACEMENTS_REQUEST';
export const ORIGIN_REPLACEMENTS_SUCCESS = 'ORIGIN_REPLACEMENTS_SUCCESS';
export const ORIGIN_REPLACEMENTS_FAILURE = 'ORIGIN_REPLACEMENTS_FAILURE';

export const BENEFITS_DISTRIBUTION_TEMPLATES_REQUEST = 'BENEFITS_DISTRIBUTION_TEMPLATES_REQUEST';
export const BENEFITS_DISTRIBUTION_TEMPLATES_SUCCESS = 'BENEFITS_DISTRIBUTION_TEMPLATES_SUCCESS';
export const BENEFITS_DISTRIBUTION_TEMPLATES_FAILURE = 'BENEFITS_DISTRIBUTION_TEMPLATES_FAILURE';

export const BUDGET_REQUEST_DISTRIBUTIONS_REQUEST = 'BUDGET_REQUEST_DISTRIBUTIONS_REQUEST';
export const BUDGET_REQUEST_DISTRIBUTIONS_SUCCESS = 'BUDGET_REQUEST_DISTRIBUTIONS_SUCCESS';
export const BUDGET_REQUEST_DISTRIBUTIONS_FAILURE = 'BUDGET_REQUEST_DISTRIBUTIONS_FAILURE';

export const OTHER_EXPENSES_RECALCULATE_REQUEST = 'OTHER_EXPENSES_RECALCULATE_REQUEST';
export const OTHER_EXPENSES_RECALCULATE_SUCCESS = 'OTHER_EXPENSES_RECALCULATE_SUCCESS';
export const OTHER_EXPENSES_RECALCULATE_FAILURE = 'OTHER_EXPENSES_RECALCULATE_FAILURE';

export const GENERAL_LEDGER_ACCOUNT_REQUEST = 'GENERAL_LEDGER_ACCOUNT_REQUEST';
export const GENERAL_LEDGER_ACCOUNT_SUCCESS = 'GENERAL_LEDGER_ACCOUNT_SUCCESS';
export const GENERAL_LEDGER_ACCOUNT_FAILURE = 'GENERAL_LEDGER_ACCOUNT_FAILURE';

export const DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_REQUEST = 'DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_REQUEST';
export const DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_SUCCESS = 'DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_SUCCESS';
export const DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_FAILURE = 'DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_FAILURE';

export const DISTRIBUTION_EXPENSE_COPY_REQUEST = 'DISTRIBUTION_EXPENSE_COPY_REQUEST';
export const DISTRIBUTION_EXPENSE_COPY_SUCCESS = 'DISTRIBUTION_EXPENSE_COPY_SUCCESS';
export const DISTRIBUTION_EXPENSE_COPY_FAILURE = 'DISTRIBUTION_EXPENSE_COPY_FAILURE';

export const DISTRIBUTION_EXPENSE_COPY_METADATA_REQUEST = 'DISTRIBUTION_EXPENSE_COPY_METADATA_REQUEST';
export const DISTRIBUTION_EXPENSE_COPY_METADATA_SUCCESS = 'DISTRIBUTION_EXPENSE_COPY_METADATA_SUCCESS';
export const DISTRIBUTION_EXPENSE_COPY_METADATA_FAILURE = 'DISTRIBUTION_EXPENSE_COPY_METADATA_FAILURE';

export const SOURCES = {
  requiredAttendance: 'RequiredAttendance',
};

export function getProductsRegistry(url, tenantName) {
  return {
    type: GET_PRODUCTS_REGISTRY_REQUEST,
    payload: {
      url: `${ url }/${ tenantName }`,
      options: {
        resource: tenantName,
      },
    },
  };
}

export function getBudgetOptions() {
  return {
    type: BUDGET_OPTIONS_REQUEST,
    payload: {
      url: BUDGET_OPTIONS_ENDPOINT,
    },
  };
}

export function getBudgetSelected(scenarioId, filterElementKey = '', filterElementsIds = []) {
  return {
    type: BUDGET_SELECTED_REQUEST,
    payload: {
      url: BUDGET_SELECTED_ENDPOINT,
      options: { data: { scenarioId, filterElementKey, filterElementsIds } },
    },
  };
}

export function getBudgetOther(yearId, filterElementKey = '', filterElementsIds = []) {
  return {
    type: BUDGET_OTHER_REQUEST,
    payload: {
      url: BUDGET_OTHER_ENDPOINT,
      options: { data: { yearId, filterElementKey, filterElementsIds } },
    },
  };
}

export function getBudgetActualPeriod(scenarioId, yearId, period, filterElementKey = '', filterElementsIds = []) {
  return {
    type: BUDGET_ACTUAL_PERIOD_REQUEST,
    payload: {
      url: BUDGET_ACTUAL_ENDPOINT,
      options: { data: { scenarioId, yearId, period, filterElementKey, filterElementsIds } },
    },
  };
}

export function getBudgetActualYear(scenarioId, yearId, filterElementKey = '', filterElementsIds = []) {
  return {
    type: BUDGET_ACTUAL_YEAR_REQUEST,
    payload: {
      url: BUDGET_ACTUAL_ENDPOINT,
      options: { data: { scenarioId, yearId, period: 14, filterElementKey, filterElementsIds } },
    },
  };
}

export function getScenarioOrganizations() {
  return {
    type: GET_ORGANIZATIONS_REQUEST,
    payload: {
      url: ORGANIZATIONS_ENDPOINT,
    },
  };
}

export function getAllFinancialYears() {
  return {
    type: GET_ALL_YEARS_REQUEST,
    payload: {
      url: ALL_YEARS_ENDPOINT,
    },
  };
}

export function getOrganizationYears(orgId) {
  return {
    type: GET_ORGANIZATIONS_YEARS_REQUEST,
    payload: {
      url: YEARS_BY_ORGANIZATIONS_ENDPOINT,
      options: {
        data: {
          orgId,
        },
      },
    },
  };
}

export function getYearPeriods(yearId) {
  return {
    type: GET_ORGANIZATIONS_PERIODS_REQUEST,
    payload: {
      url: `${ YEARS_BY_ORGANIZATIONS_ENDPOINT }/${ yearId }${ PERIODS_ENDPOINT }`,
      options: {
        data: {
          yearId,
        },
      },
    },
  };
}

export function getPeriodsForOrganizationYear(yearId, yearIndex, yearCode) {
  return {
    type: GET_ORGANIZATION_YEAR_PERIODS_REQUEST,
    payload: {
      url: `${ YEARS_BY_ORGANIZATIONS_ENDPOINT }/${ yearId }${ PERIODS_ENDPOINT }`,
      options: {
        data: {
          yearId,
        },
        resource: {
          yearCode,
          yearIndex,
        },
      },
    },
  };
}

export function getIndexationPeriods(yearId) {
  return {
    type: GET_INDEXATION_PERIODS_REQUEST,
    payload: {
      url: `${ YEARS_BY_ORGANIZATIONS_ENDPOINT }/${ yearId }${ PERIODS_ENDPOINT }`,
      options: {
        data: {
          yearId,
        },
      },
    },
  };
}

export function getScenarioResponsible() {
  return {
    type: GET_RESPONSIBLE_REQUEST,
    payload: {
      url: RESPONSIBLE_ENDPOINT,
    },
  };
}

export function getFunctionalCenters(metadata, parameters, queryParameters, filterKeyword) {
  const {
    departments,
    subDepartments,
    programs,
    subPrograms,
    primaryCodeGroups,
    responsibilityCentersLevel1,
    responsibilityCentersLevel2,
    responsibilityCentersLevel3,
    sites,
  } = queryParameters;

  const {
    organizationId = '',
    scenarioId,
    filterElementKey,
    filterElementsIds,
  } = parameters;

  const paging = {
    // TODO: fix combination of paging and filtering
    // pageNo: 1,
    // pageSize: DEFAULT_ENTITIES_PAGE_SIZE,
    // ...pick(parameters, PAGE_PROPS),
    // ...pick(queryParameters, PAGE_PROPS),
  };

  const data = omitUndefinedProps({
    departmentIds: map(departments, getId),
    subDepartmentIds: map(subDepartments, getId),
    programIds: map(programs, getId),
    subProgramIds: map(subPrograms, getId),
    primaryCodeGroupIds: map(primaryCodeGroups, getId),
    responsibilityCenterLevel1Ids: map(responsibilityCentersLevel1, getId),
    responsibilityCenterLevel2Ids: map(responsibilityCentersLevel2, getId),
    responsibilityCenterLevel3Ids: map(responsibilityCentersLevel3, getId),
    siteIds: map(sites, getId),
    scenarioId,
    organizationId,
    filterElementKey,
    filterElementsIds,
    filterKeyword,
    ...paging,
  });

  return {
    type: GET_FUNCTIONAL_CENTER_REQUEST,
    payload: {
      url: FUNCTIONAL_CENTERS_ENDPOINT,
      options: {
        data,
        resource: {
          parameters,
          queryParameters,
          filterKeyword,
          paging,
          metadata,
        },
      },
    },
  };
}

export function getBudgetScenarios(options) {
  const { pageNo, pageSize } = options;
  return {
    type: BUDGET_SCENARIOS_REQUEST,
    payload: {
      url: BUDGET_SCENARIOS_ENDPOINT,
      options: {
        data: {
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getScenarioCopyMetadata(scenarioId) {
  return {
    type: BUDGET_SCENARIO_COPY_METADATA_REQUEST,
    payload: {
      url: BUDGET_SCENARIO_COPY_METADATA_ENDPOINT,
    },
  };
}

export function postScenarioCopy(scenarioId, data, actionResponses = []) {
  const {
    targetFinancialYear,
    targetScenarioName: scenarioCode,
    targetScenarioDescription: scenarioDescription,
    isIncludePositionsForThisScenario: isIncludePositions,
    isIncludePositionsByJobTitleForThisScenario: isIncludePositionsByJobTitle,
    isIncludeRequiredAttendanceForThisScenario: isIncludeRequiredAttendances,
    isIncludeRequestsForThisScenario: isIncludeRequests,
    isIncludeInactivePositions,
    isIncludeBudgetsForOtherExpenses,
    isImplementationScenario,
    isCopyJobTitleIndexationRates,
    isCopyAttachedDocuments,
  } = data;
  return {
    type: BUDGET_SCENARIO_COPY_REQUEST,
    payload: {
      url: BUDGET_SCENARIO_COPY_ENDPOINT,
      options: {
        method: 'POST',
        body: {
          id: scenarioId,
          data: {
            copyFrom: {
              scenarioId,
            },
            copyTo: {
            },
            toUpdateInCopy: {
              financialYearId: getId(targetFinancialYear),
              scenarioCode,
              scenarioDescription,
              isIncludePositions,
              isIncludePositionsByJobTitle,
              isIncludeRequiredAttendances,
              isIncludeRequests,
              isIncludeInactivePositions,
              isIncludeBudgetsForOtherExpenses,
              isImplementationScenario,
              isCopyJobTitleIndexationRates,
              isCopyAttachedDocuments,
            },
            actionResponses: [],
          },
          actionResponses,
        },
        resource: { scenarioId },
      },
    },
  };
}

export function getBudgetDetails(detailId, scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize,
  filters, sorting, groups, parentHash, recursive) {
  const endpoint = BUDGET_DETAILS_ENDPOINT;

  return {
    type: BUDGET_DETAILS_REQUEST,
    payload: {
      url: `${ endpoint }/${ detailId }`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          page: {
            pageNo,
            pageSize,
          },
          sortBy: (sorting && sorting.columnId && sorting.order) ? sorting.columnId : '',
          sortOrder: (sorting && sorting.order) ? sorting.order : '',
          filters,
        },
        resource: {
          detailId,
          filters,
          sorting,
          groups,
          parentHash,
          recursive,
        },
      },
    },
  };
}

export function getBudgetDetailsGroups(detailId, scenarioId, filterElementKey, filterElementsIds, filters, groupId, parentHash, recursive) {
  return {
    type: BUDGET_DETAILS_GROUPS_REQUEST,
    payload: {
      url: `${ BUDGET_DETAILS_ENDPOINT }/${ detailId }/groups`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          filters,
          groupBy: groupId,
        },
        resource: {
          detailId,
          filters,
          groupId,
          parentHash,
          recursive,
        },
      },
    },
  };
}

export function getBudgetFilterValues(detailId, scenarioId, filterElementKey, filterElementsIds, columnId) {
  return {
    type: BUDGET_FILTER_VALUES_REQUEST,
    payload: {
      url: `${ BUDGET_DETAILS_ENDPOINT }/${ detailId }/groups`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          filters: [],
          groupBy: columnId,
        },
        resource: {
          detailId,
          columnId,
        },
      },
    },
  };
}


export function getBudgetDetailsReport(detailId, scenarioId, body, filterElementKey, filterElementsIds) {
  return {
    type: BUDGET_DETAILS_REPORT_REQUEST,
    payload: {
      url: `${ BUDGET_DETAILS_ENDPOINT }/${ detailId }/Report`,
      options: {
        method: 'POST',
        responseBlob: true,
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
        },
        resource: detailId,
        body,
        reportName: body.reportName,
      },
    },
  };
}

export function getBudgetDetailsOrigin(detailId, scenarioId, originId, functionalCenterId, filterElementKey, filterElementsIds, pageNo, pageSize) {
  return {
    type: BUDGET_DETAILS_ORIGIN_REQUEST,
    payload: {
      url: `${ BUDGET_DETAILS_ENDPOINT }/${ detailId }/origins/${ originId }`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          functionalCenterId,
          filterElementKey,
          filterElementsIds,
          page: {
            pageNo,
            pageSize,
          },
          filters: null,
        },
        resource: { detailId, originId },
      },
    },
  };
}

export function getBudgetDetailsOriginReport(detailId, scenarioId, originId, functionalCenterId, body, filterElementKey, filterElementsIds) {
  return {
    type: BUDGET_DETAILS_ORIGIN_REPORT_REQUEST,
    payload: {
      url: `${ BUDGET_DETAILS_ENDPOINT }/${ detailId }/origins/${ originId }/Report`,
      options: {
        method: 'POST',
        responseBlob: true,
        data: {
          scenarioId,
          functionalCenterId,
          filterElementKey,
          filterElementsIds,
        },
        resource: detailId,
        body,
        reportName: body.reportName,
      },
    },
  };
}

export function getUserInfo(userName) {
  return {
    type: USER_INFO_REQUEST,
    payload: {
      url: `${ USER_INFO_ENDPOINT }/${ userName }`,
    },
  };
}

export function getFilterElementsKeys() {
  return {
    type: GET_FILTER_ELEMENTS_KEYS_REQUEST,
    payload: {
      url: FILTER_ELEMENTS_KEYS_ENDPOINT,
    },
  };
}

export function getFilterElements(elementKey, moduleKey = FILTER_MODULE_KEY, organizationId, searchKeyword = '') {
  return {
    type: GET_FILTER_ELEMENTS_REQUEST,
    payload: {
      url: FILTER_ELEMENTS_ENDPOINT,
      options: { data: { elementKey, moduleKey, organizationId, searchKeyword } },
    },
  };
}

export function getPositions(scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize) {
  return {
    type: POSITIONS_REQUEST,
    payload: {
      url: `${ POSITIONS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getPosition(positionId) {
  return {
    type: POSITION_REQUEST,
    payload: {
      url: `${ POSITIONS_ENDPOINT }/${ positionId }`,
      options: {
        method: 'GET',
        resource: { positionId },
      },
    },
  };
}

export function getRequiredAttendances(parameters, actionModifier) {
  const { scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize, reference, search } = parameters;
  const { actionType, id } = actionModifier;
  return {
    type: actionType,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
          reference,
          functionalCenterIds: map(search.functionalCenter, getId),
          jobStatusIds: map(search.jobStatus, getId),
          jobTitleGroupIds: map(search.jobTitleGroup, getId),
          jobTitleIds: map(search.jobTitle, getId),
          jobTypeIds: map(search.jobType, getId),
          description: search.description,
        },
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
          reference,
          search,
        },
        // TODO: remove after Default Entities Load refactoring
        meta: {
          id,
        },
      },
    },
  };
}

export function getRequiredAttendance(requiredAttendanceId, actionType = 'REQUIRED_ATTENDANCE_REQUEST') {
  return {
    type: actionType,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_ENDPOINT }/${ requiredAttendanceId }`,
      options: {
        method: 'GET',
        resource: { requiredAttendanceId },
      },
    },
  };
}

export function saveRequiredAttendance(requiredAttendanceId, newEntry, actionResponses) {
  return {
    type: REQUIRED_ATTENDANCE_SAVE_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_ENDPOINT }/${ requiredAttendanceId }`,
      options: {
        method: 'PUT',
        body: {
          requiredAttendanceId,
          id: requiredAttendanceId,
          data: newEntry,
          actionResponses,
        },
        resource: { requiredAttendanceId },
      },
    },
  };
}

export function createRequiredAttendance(newEntry) {
  return {
    type: REQUIRED_ATTENDANCE_CREATE_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: newEntry,
          actionResponses: [],
        },
      },
    },
  };
}

export function copyRequiredAttendance(id, entry) {
  const { code, description, groupType, jobTitle, jobTitleGroup, jobStatus, jobType,
    isIncludeSchedule, isIncludeTemporaryClosure, isIncludeBenefits, isIncludeReplacements,
    isIncludePremiums, isIncludePayrollDeductions, isIncludeSpecificDistribution,
    isIncludeAttachment, isIncludeNotes,
  } = entry;

  return {
    type: REQUIRED_ATTENDANCE_COPY_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_COPY_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: {
            copyFrom: {
              RequiredAttendanceIds: map(entry.references, getId),
            },
            copyTo: {
              functionalCenterIds: map(entry.targetFunctionalCenter, getId),
            },
            toUpdateInCopy: {
              code,
              description,
              groupType,
              jobTitle,
              jobTitleGroup,
              jobStatus,
              jobType,
              isIncludeSchedule,
              isIncludeTemporaryClosure,
              isIncludeBenefits,
              isIncludeReplacements,
              isIncludePremiums,
              isIncludePayrollDeductions,
              isIncludeSpecificDistribution,
              isIncludeAttachment,
              isIncludeNotes,
            },
            actionResponses: [],
            id,
          },
        },
      },
    },
  };
}

export function deleteRequiredAttendance(requiredAttendanceId, journal, requiredAttendanceTitle, scenarioId) {
  return {
    type: REQUIRED_ATTENDANCE_DELETE_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_ENDPOINT }/${ requiredAttendanceId }`,
      options: {
        method: 'DELETE',
        resource: { requiredAttendanceId, requiredAttendanceTitle, scenarioId },
        data: {
          journal,
        },
      },
    },
  };
}

export function getRequiredAttendanceMetadata() {
  return {
    type: REQUIRED_ATTENDANCE_METADATA_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function getRequiredAttendanceListMetadata() {
  return {
    type: REQUIRED_ATTENDANCE_LIST_METADATA_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_LIST_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function getRequiredAttendanceCopyMetadata() {
  return {
    type: REQUIRED_ATTENDANCE_COPY_METADATA_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_COPY_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function getRequiredAttendanceDefault(scenarioId) {
  return {
    type: REQUIRED_ATTENDANCE_DEFAULT_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DEFAULT_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
        },
      },
    },
  };
}

export function getRequiredAttendanceQuery(sourceId, scenarioId) {
  const source = SOURCES.requiredAttendance;
  return {
    type: REQUIRED_ATTENDANCE_QUERY_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_QUERY_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          sourceId,
          scenarioId,
          source,
        },
      },
    },
  };
}

export function getRevenueAndOtherExpenses(scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize) {
  return {
    type: REVENUE_AND_OTHER_EXPENSES_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getRevenueAndOtherExpensesDefault(scenarioId) {
  return {
    type: REVENUE_AND_OTHER_EXPENSES_DEFAULT_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_DEFAULT_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
        },
      },
    },
  };
}

export function getRevenueAndOtherExpensesMetadata() {
  return {
    type: REVENUE_AND_OTHER_EXPENSES_METADATA_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function createRevenueAndOtherExpenses(newEntry, actionResponses) {
  return {
    type: REVENUE_AND_OTHER_EXPENSES_CREATE_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: newEntry,
          actionResponses,
        },
      },
    },
  };
}

export function getEmployee(employeeId, scenarioId) {
  return {
    type: EMPLOYEE_REQUEST,
    payload: {
      url: `${ EMPLOYEES_ENDPOINT }/${ employeeId }`,
      options: {
        method: 'GET',
        resource: { employeeId },
        data: {
          scenarioId,
        },
      },
    },
  };
}

export function getPositionsByJobTitle(scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize) {
  return {
    type: POSITIONS_BY_JOB_TITLE_REQUEST,
    payload: {
      url: `${ POSITIONS_BY_JOB_TITLE_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getPositionByJobTitle(positionId) {
  return {
    type: POSITION_BY_JOB_TITLE_REQUEST,
    payload: {
      url: `${ POSITIONS_BY_JOB_TITLE_ENDPOINT }/${ positionId }`,
      options: {
        method: 'GET',
        resource: { positionId },
      },
    },
  };
}

export function getBudgetRequests(scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize, searchKeyword, search) {
  const data = omitUndefinedProps({
    scenarioId,
    filterElementKey,
    filterElementsIds,
    pageNo,
    pageSize,
    RequestNumber: searchKeyword,
    FunctionalCenterIds: map(search.functionalCenter, getId),
    RequestTypeIds: map(search.requestType, getId),
    JobTitleIds: map(search.jobTitle, getId),
    JobTitleGroupIds: map(search.jobTitleGroup, getId),
    NatureOfExpenseIds: map(search.natureOfExpense, getId),
    SecondaryCodeIds: map(search.secondaryCode, getId),
    Description: search.description,
    IsSpecificRequest: invertThreeStateOption(search.isSpecificRequest),
    IsAmountToDistribute: invertThreeStateOption(search.isAmountToDistribute),
    ForThisScenario: search.forThisScenario,
    UnionIds: map(search.union, getId),
  });
  return {
    type: BUDGET_REQUESTS_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_ENDPOINT }`,
      options: {
        method: 'GET',
        data,
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
          searchKeyword,
          search,
        },
      },
    },
  };
}

export function getBudgetRequest(budgetRequestId) {
  return {
    type: BUDGET_REQUEST_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_ENDPOINT }/${ budgetRequestId }`,
      options: {
        method: 'GET',
        resource: { budgetRequestId },
      },
    },
  };
}

export function saveBudgetRequest(budgetRequestId, newEntry, actionResponses) {
  return {
    type: BUDGET_REQUEST_SAVE_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_ENDPOINT }/${ budgetRequestId }`,
      options: {
        method: 'PUT',
        body: {
          budgetRequestId,
          id: budgetRequestId,
          data: newEntry,
          actionResponses,
        },
        resource: { budgetRequestId },
      },
    },
  };
}

export function createBudgetRequest(newEntry, actionResponses) {
  return {
    type: BUDGET_REQUEST_CREATE_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: newEntry,
          actionResponses,
        },
      },
    },
  };
}

export function deleteBudgetRequest(budgetRequestId, journal, budgetRequestTitle, scenarioId) {
  return {
    type: BUDGET_REQUEST_DELETE_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_ENDPOINT }/${ budgetRequestId }`,
      options: {
        method: 'DELETE',
        resource: { budgetRequestId, budgetRequestTitle, scenarioId },
        data: {
          journal,
        },
      },
    },
  };
}

export function getBudgetRequestMetadata(isCreate = false) {
  const action = isCreate ? 'Insert' : 'Update';
  return {
    type: BUDGET_REQUEST_METADATA_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          action,
        },
        resource: { },
      },
    },
  };
}

export function getBudgetRequestListMetadata() {
  return {
    type: BUDGET_REQUEST_LIST_METADATA_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_LIST_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function getBudgetRequestDefault(scenarioId) {
  return {
    type: BUDGET_REQUEST_DEFAULT_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_DEFAULT_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
        },
      },
    },
  };
}


export function getBudgetRequestTotals(url, calculationBase, valueToDistribute, financialYearId) {
  return {
    type: BUDGET_REQUEST_TOTALS_REQUEST,
    payload: {
      url: `${ url }`,
      options: {
        method: 'GET',
        data: {
          calculationBase,
          valueToDistribute,
          financialYearId,
        },
        resource: { },
      },
    },
  };
}

export function getBudgetRequestFte(url, financialYearId, jobTypeId, jobTitleId, totalValue) {
  return {
    type: BUDGET_REQUEST_FTE_CALCULATION_REQUEST,
    payload: {
      url: `${ url }`,
      options: {
        method: 'GET',
        data: {
          financialYearId,
          jobTypeId,
          jobTitleId,
          totalValue,
        },
      },
    },
  };
}

export function deleteOtherExpenses(otherExpensesId, journal, otherExpensesTitle, scenarioId) {
  return {
    type: OTHER_EXPENSES_DELETE_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }/${ otherExpensesId }`,
      options: {
        method: 'DELETE',
        resource: { otherExpensesId, otherExpensesTitle, scenarioId },
        data: {
          journal,
        },
      },
    },
  };
}

export function getOtherExpenses(id) {
  return {
    type: OTHER_EXPENSES_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }/${ id }`,
      options: {
        method: 'GET',
        resource: { id },
      },
    },
  };
}

export function getOtherExpensesActualDetails(otherExpensesId, financialYearId, description) {
  return {
    type: OTHER_EXPENSES_ACTUAL_DETAILS_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }/${ otherExpensesId }/Actual/${ financialYearId }`,
      options: {
        method: 'GET',
        resource: { otherExpensesId, financialYearId, description },
      },
    },
  };
}

export function getOtherExpensesBudgetDetails(otherExpensesId, financialYearId, description) {
  return {
    type: OTHER_EXPENSES_BUDGET_DETAILS_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }/${ otherExpensesId }/Budget/${ financialYearId }`,
      options: {
        method: 'GET',
        resource: { otherExpensesId, financialYearId, description },
      },
    },
  };
}

export function getOtherExpensesHistoryDetails(id) {
  return {
    type: OTHER_EXPENSES_HISTORY_DETAILS_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_HISTORY_BY_ID_ENDPOINT }/${ id }`,
      options: {
        method: 'GET',
        resource: { id },
      },
    },
  };
}

export function getOtherExpensesMetadata(otherExpensesId) {
  return {
    type: OTHER_EXPENSES_METADATA_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_METADATA_ENDPOINT }/${ otherExpensesId }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function saveOtherExpensesHistory(id, data, actionResponses = [{ action: 0, userResponse: 0 }]) {
  return {
    type: OTHER_EXPENSES_SAVE_HISTORY_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_HISTORY_BY_ID_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: {
            ...data,
          },
          actionResponses: [
            ...actionResponses,
          ],
        },
        resource: { id },
      },
    },
  };
}

export function cancelOtherExpensesHistory() {
  return {
    type: OTHER_EXPENSES_CANCEL_HISTORY_REQUEST,
  };
}

export function calculateOtherExpensesHistory(data) {
  return {
    type: OTHER_EXPENSES_CALCULATE_HISTORY_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_HISTORY_BY_ID_ENDPOINT }/Calculate`,
      options: {
        method: 'POST',
        body: {
          ...data,
        },
      },
    },
  };
}

export function getOtherExpensesHistoryMetadata(id) {
  return {
    type: OTHER_EXPENSES_HISTORY_METADATA_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_HISTORY_BY_ID_ENDPOINT }/${ id }/Metadata`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function saveOtherExpenses(otherExpensesId, newEntry, actionResponses) {
  return {
    type: OTHER_EXPENSES_SAVE_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_ENDPOINT }/${ otherExpensesId }`,
      options: {
        method: 'PUT',
        body: {
          otherExpensesId,
          data: newEntry,
          actionResponses,
        },
        resource: { otherExpensesId },
      },
    },
  };
}

export function getImports(scenarioId, pageNo, pageSize) {
  return {
    type: IMPORTS_REQUEST,
    payload: {
      url: `${ IMPORT_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getImport(importScenarioId) {
  return {
    type: IMPORT_REQUEST,
    payload: {
      url: `${ IMPORT_ENDPOINT }/${ importScenarioId }`,
      options: {
        method: 'GET',
        resource: { importScenarioId },
      },
    },
  };
}

export function getImportAccounts(importScenarioId, pageNo, pageSize) {
  return {
    type: IMPORT_ACCOUNTS_REQUEST,
    payload: {
      url: `${ IMPORT_ENDPOINT }/${ importScenarioId }/accounts`,
      options: {
        method: 'GET',
        data: {
          importScenarioId,
          pageNo,
          pageSize,
        },
        resource: {
          importScenarioId,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getImportAccountDetails(importScenarioId, accountId) {
  return {
    type: IMPORT_ACCOUNT_DETAILS_REQUEST,
    payload: {
      url: `${ IMPORT_ENDPOINT }/${ importScenarioId }/accounts/${ accountId }`,
      options: {
        method: 'GET',
        resource: { importScenarioId, accountId },
      },
    },
  };
}

export function getImportOtherScenarios(scenarioId, importNumber, pageNo, pageSize) {
  return {
    type: IMPORT_OTHER_SCENARIOS_REQUEST,
    payload: {
      url: `${ IMPORT_ENDPOINT }/otherScenario`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          importNumber,
          pageNo,
          pageSize,
        },
        resource: { scenarioId },
      },
    },
  };
}

export function getParametersByStructure(scenarioId, filterElementKey, filterElementsIds, pageNo, pageSize) {
  return {
    type: PARAMETERS_BY_STRUCTURE_REQUEST,
    payload: {
      url: `${ PARAMETERS_BY_STRUCTURE_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getParameterByStructure(id) {
  return {
    type: PARAMETER_BY_STRUCTURE_REQUEST,
    payload: {
      url: `${ PARAMETERS_BY_STRUCTURE_ENDPOINT }/${ id }`,
      options: {
        method: 'GET',
        resource: { id },
      },
    },
  };
}

export function getGlobalParameters(financialYearId) {
  return {
    type: GLOBAL_PARAMETERS_REQUEST,
    payload: {
      url: `${ GLOBAL_PARAMETERS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          financialYearId,
        },
      },
    },
  };
}


function getMetadataEndpoint(metadata, defaultUrl) {
  if (metadata) {
    const el = first(metadata.endpoints);
    if (el) {
      if (el.endpoint === 'api/GlobalPayrollDeductions?financialYearId=') {
        return '/api/GlobalPayrollDeductions'; // temporary fix
      }
      return `/${ el.endpoint }`;
    }
  }

  return defaultUrl;
}

export function getEntities(section) {
  return function (metadata, parameters, queryParameters, filterKeyword) {
    const url = getMetadataEndpoint(metadata, FILTER_ELEMENTS_ENDPOINT);
    const paging = {
      // TODO: fix combination of paging and filtering
      // pageNo: 1,
      // pageSize: DEFAULT_ENTITIES_PAGE_SIZE,
      // ...pick(parameters, PAGE_PROPS),
      // ...pick(queryParameters, PAGE_PROPS),
    };
    const data = omitUndefinedProps({
      ...parameters,
      ...queryParameters,
      filterKeyword,
      ...paging,
    });
    return {
      type: ENTITIES_REQUEST,
      payload: {
        url,
        options: {
          method: 'GET',
          data,
          resource: { section, metadata, parameters, queryParameters, paging },
        },
      },
    };
  };
}

export function postTotalHoursCalculation(calculationParameters) {
  return {
    type: REQUIRED_ATTENDANCE_TOTAL_HOURS_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_TOTAL_HOURS_CALCULATION_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          ...calculationParameters,
        },
      },
    },
  };
}

export function getBenefitsDays(parameters) {
  return {
    type: REQUIRED_ATTENDANCE_BENEFITS_DAYS_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_BENEFITS_DAYS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          ...parameters,
        },
      },
    },
  };
}

export function getBenefitsPercentages(parameters) {
  return {
    type: REQUIRED_ATTENDANCE_BENEFITS_PERCENTAGES_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_BENEFITS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          ...parameters,
        },
      },
    },
  };
}

export function getBenefits(parameters) {
  return {
    type: BUDGET_REQUEST_BENEFITS_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_BENEFITS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          ...parameters,
        },
      },
    },
  };
}

export function getOtherRates(scenarioId, jobTitleId, functionalCenterIds, pageNo, pageSize) {
  return {
    type: OTHER_RATES_REQUEST,
    payload: {
      url: `${ OTHER_RATES_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          jobTitleId,
          functionalCenterIds,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getGroupLevel(financialYearId, jobTitleId, pageNo, pageSize) {
  return {
    type: GROUP_LEVEL_REQUEST,
    payload: {
      url: `${ GROUP_LEVEL_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          financialYearId,
          jobTitleId,
          // pageNo,
          // pageSize,
        },
      },
    },
  };
}

export function getEndpoint(metadata) {
  if (metadata && metadata.endpoints && metadata.endpoints.length > 0) {
    return `/${ metadata.endpoints[0].endpoint }`;
  }

  return undefined;
}

export function getSuggestedHourlyRate(url, scenarioId, financialYearId, originType, requestType, rateOriginType, functionalCenterId,
  jobTitleId, jobTitleGroupId, jobGroupType, jobLevelType, setValue) {
  return {
    type: GET_SUGGESSTED_HOURLY_RATE_REQUEST,
    payload: {
      url,
      options: {
        method: 'GET',
        data: {
          originType,
          requestType,
          rateOriginType,
          scenarioId,
          financialYearId,
          functionalCenterId,
          jobTitleId,
          jobTitleGroupId,
          jobGroupType,
          jobLevelType,
        },
        resource: {
          setValue,
        },
      },
    },
  };
}
export function getSuggestedHourlyRateForDistributionExpense(url, scenarioId, financialYearId, originType, requestType, rateOriginType, functionalCenterId,
  jobTitleId, jobTitleGroupId, jobGroupType, jobLevelType, setValue) {
  return {
    type: GET_SUGGESSTED_HOURLY_RATE_DISTRIBUTION_EXPENSE_REQUEST,
    payload: {
      url,
      options: {
        method: 'GET',
        data: {
          originType,
          requestType,
          rateOriginType,
          scenarioId,
          financialYearId,
          functionalCenterId,
          jobTitleId,
          jobTitleGroupId,
          jobGroupType,
          jobLevelType,
        },
        resource: {
          setValue,
        },
      },
    },
  };
}

export function getOriginReplacements(parameters) {
  return {
    type: ORIGIN_REPLACEMENTS_REQUEST,
    payload: {
      url: `${ ORIGIN_REPLACEMENTS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          ...parameters,
        },
      },
    },
  };
}

export function getBenefitsModel(financialYearId, searchKeyword, pageNo, pageSize) {
  return {
    type: BENEFITS_DISTRIBUTION_TEMPLATES_REQUEST,
    payload: {
      url: DISTRIBUTION_TEMPLATES_ENDPOINT,
      options: {
        method: 'GET',
        data: {
          financialYearId,
          searchKeyword,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getBudgetRequestDistributions(parameters, distributions) {
  return {
    type: BUDGET_REQUEST_DISTRIBUTIONS_REQUEST,
    payload: {
      url: `${ BUDGET_REQUEST_DISTRIBUTIONS_ENDPOINT }`,
      options: {
        method: 'POST',
        data: { ...parameters },
        body: (distributions && !isEmpty(distributions) ? { ...distributions } : { periods: [] }),
      },
    },
  };
}

export function getCalculationFollowUp(scenarioId, pageNo, pageSize) {
  return {
    type: CALCULATION_FOLLOW_UP_REQUEST,
    payload: {
      url: `${ CALCULATION_FOLLOW_UP_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          scenarioId,
          pageNo,
          pageSize,
        },
        resource: {
          scenarioId,
          pageNo,
          pageSize,
        },
      },
    },
  };
}

export function getCalculationFollowUpDetails(calculationId) {
  return {
    type: CALCULATION_FOLLOW_UP_DETAILS_REQUEST,
    payload: {
      url: `${ CALCULATION_FOLLOW_UP_ENDPOINT }/${ calculationId }`,
      options: {
        method: 'GET',
        resource: {
          calculationId,
        },
      },
    },
  };
}

export function recalculateRevenueAndOtherExpensesHistoryAndDistributions(entry, distributions) {
  const {
    amountToBeDistributed,
    calculationBase,
    distributionType,
    distributionModel,
    financialYearId,
    financialYearGroup,
    scenarioId,
    totalAmount,
  } = entry;
  return {
    type: REVENUE_AND_OTHER_EXPENSES_RECALCULATE_REQUEST,
    payload: {
      url: REVENUE_AND_OTHER_EXPENSES_RECALCULATE_ENDPOINT,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          financialYearId,
          amountToBeDistributed,
          totalAmount,
          distributionType,
          distributionModelId: get(distributionModel, 'id'),
          calculationBaseId: get(calculationBase, 'id'),
          financialYearGroupId: get(financialYearGroup, 'id'),
          distributions,
          history: null,
          previousHistory: null,
        },
      },
    },
  };
}

export function recalculateOtherExpensesHistoryAndDistributions(entry, history, distributions, previousHistory) {
  if (isEmptyObject(history)) {
    return { type: 'UNKNOWN' };
  }
  const {
    amountToBeDistributed,
    calculationBase,
    distributionType,
    distributionModel,
    financialYearId,
    otherExpensesId,
    totalAmount,
  } = entry;
  return {
    type: OTHER_EXPENSES_RECALCULATE_REQUEST,
    payload: {
      url: `${ OTHER_EXPENSES_RECALCULATE_ENDPOINT(otherExpensesId) }`,
      options: {
        method: 'POST',
        body: {
          financialYearId,
          calculationBaseId: get(calculationBase, 'id'),
          amountToBeDistributed,
          totalAmount,
          distributionType,
          distributionModelId: get(distributionModel, 'id'),
          history,
          distributions,
          previousHistory,
        },
      },
    },
  };
}

export function getRequiredAttendanceDashboard(scenarioId, page, filterElementKey, filterElementsIds) {
  return {
    type: REQUIRED_ATTENDANCE_DASHBOARD_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DASHBOARD_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          page,
          filterElementKey,
          filterElementsIds,
        },
        resource: {
          scenarioId,
          page,
          filterElementKey,
          filterElementsIds,
        },
      },
    },
  };
}

export function putRequiredAttendanceDashboard(data, actionResponses = []) {
  return {
    type: REQUIRED_ATTENDANCE_DASHBOARD_SAVE_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DASHBOARD_ENDPOINT }`,
      options: {
        method: 'PUT',
        body: {
          data,
          actionResponses,
        },
      },
    },
  };
}

export function getRequiredAttendanceParameters(financialYearId) {
  return {
    type: REQUIRED_ATTENDANCE_PARAMETERS_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_PARAMETERS_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          financialYearId,
        },
      },
    },
  };
}

export function getRequiredAttendanceDashboardMetadata() {
  return {
    type: REQUIRED_ATTENDANCE_DASHBOARD_METADATA_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DASHBOARD_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
      },
    },
  };
}

export function postRequiredAttencaneDashboardRecalculate(data, index) {
  return {
    type: REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DASHBOARD_RECALCULATE_TOTAL_ENDPOINT }`,
      options: {
        method: 'POST',
        body: data,
        resource: {
          index,
        },
      },
    },
  };
}

export function postRequiredAttendanceDashboardInitialize(scenarioId, filterElementKey, filterElementsIds) {
  return {
    type: REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_REQUEST,
    payload: {
      url: `${ REQUIRED_ATTENDANCE_DASHBOARD_INITIALIZE_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          scenarioId,
          filterElementKey,
          filterElementsIds,
        },
      },
    },
  };
}

export function otherExpensesSetReserveAccount() {
  return {
    type: OTHER_EXPENSES_RESERVE_ACCOUNT,
  };
}

export function getGeneralLedgerAccount(scenarioId, organizationId, filterKeyword, pageNo, pageSize) {
  const data = {
    scenarioId,
    filterKeyword,
    pageNo,
    pageSize,
  };
  if (organizationId) {
    data.organizationId = organizationId;
  }
  return {
    type: GENERAL_LEDGER_ACCOUNT_REQUEST,
    payload: {
      url: GENERAL_LEDGER_ACCOUNT_ENDPOINT,
      options: {
        method: 'GET',
        data,
        resource: {
          ...data,
        },
      },
    },
  };
}

export function getDistributionsList(sourceId, scenarioId) {
  return {
    type: REQUIRED_ATTENDANCE_DISTRIBUTIONS_LIST_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          sourceId,
          scenarioId,
        },
      },
    },
  };
}

export function deleteDistribution(id, journal, description, requiredAttendanceId, scenarioId) {
  return {
    type: REQUIRED_ATTENDANCE_DISTRIBUTIONS_DELETE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }/${ id }`,
      options: {
        method: 'DELETE',
        resource: { description, requiredAttendanceId, scenarioId },
        data: {
          journal,
        },
      },
    },
  };
}

export function getDistributionExpense(id) {
  return {
    type: DISTRIBUTION_EXPENSE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }/${ id }`,
      options: {
        method: 'GET',
        resource: { id },
      },
    },
  };
}

export function getDistributionExpenseMetadata(id) {
  return {
    type: DISTRIBUTION_EXPENSE_METADATA_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }/${ id }/Metadata`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function saveDistributionExpense(id, data, actionResponses = []) {
  return {
    type: DISTRIBUTION_EXPENSE_SAVE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }/${ id }`,
      options: {
        method: 'PUT',
        body: {
          data,
          id,
          actionResponses,
        },
        resource: { id },
      },
    },
  };
}

export function createDistributionExpense(sourceId, data, actionResponses = []) {
  return {
    type: DISTRIBUTION_EXPENSE_CREATE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data,
          actionResponses,
          id: sourceId,
        },
        data: {
          sourceId,
        },
        resource: { sourceId },
      },
    },
  };
}

export function getDistributionExpenseDefault(sourceId) {
  return {
    type: DISTRIBUTION_EXPENSE_DEFAULT_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_DEFAULT_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          sourceId,
        },
        resource: { sourceId },
      },
    },
  };
}

export function recalculateDistributionExpenseTotalToBeDistributed(entry, requiredAttendanceId) {
  const {
    expense,
    holidayGroup,
    distributionType,
    totalToBeDistributed,
    valueToBeDistributed,
    previousValueToBeDistributed,
  } = entry;

  return {
    type: DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_TOTAL_TO_BE_DISTRIBUTED }`,
      options: {
        method: 'POST',
        body: {
          totalToBeDistributed,
          sourceId: requiredAttendanceId,
          expense: expense || {},
          valueToBeDistributed,
          previousValueToBeDistributed,
          holidayGroup: nullifyIfEmpty(holidayGroup),
          distributionType,
        },
      },
    },
  };
}

export function calculateDistributionExpense(data) {
  const { expense } = data;

  return {
    type: DISTRIBUTION_EXPENSE_RECALCULATE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_ENDPOINT }/Recalculate`,
      options: {
        method: 'POST',
        body: {
          ...data,
          expense: expense || {},
        },
      },
    },
  };
}

export function copyDistributionExpense(requiredAttendanceId, distributionExpenseIds, entry) {
  return {
    type: DISTRIBUTION_EXPENSE_COPY_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_COPY_ENDPOINT }`,
      options: {
        method: 'POST',
        body: {
          data: {
            copyFrom: {
              distributionExpenseIds: map(entry.targetDistributionExpenses, getId),
            },
            copyTo: {
              functionalCenterIds: map(entry.targetFunctionalCenter, getId),
              sourceIds: map(entry.sourceIds, getId),
            },
            toUpdateInCopy: {
              isIncludeAttachment: entry.isIncludeAttachment,
            },
            actionResponses: [],
          },
        },
      },
    },
  };
}

export function getDistributionExpenseCopyMetadata() {
  return {
    type: DISTRIBUTION_EXPENSE_COPY_METADATA_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSE_COPY_METADATA_ENDPOINT }`,
      options: {
        method: 'GET',
        resource: { },
      },
    },
  };
}

export function getDefaultDistributionExpenseTypeToCopy(sourceId, expenseId) {
  return {
    type: DISTRIBUTION_EXPENSE_COPY_DEFAULT_EXPENSE_REQUEST,
    payload: {
      url: `${ DISTRIBUTION_EXPENSES_COPY_DEFAULT_EXPENSE_ENDPOINT }`,
      options: {
        method: 'GET',
        data: {
          sourceId,
        },
        resource: {
          expenseId,
        },
      },
    },
  };
}
