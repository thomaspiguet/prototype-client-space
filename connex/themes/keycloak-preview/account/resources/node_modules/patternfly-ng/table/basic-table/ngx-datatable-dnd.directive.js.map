{"version":3,"file":"ngx-datatable-dnd.directive.js","sourceRoot":"","sources":["../../../../build/src/app/table/basic-table/ngx-datatable-dnd.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange\r\n} from '@angular/core';\r\n\r\nimport { dragula, DragulaService } from 'ng2-dragula';\r\n\r\n/**\r\n * Drag and drop directive used with the underlying ngx-datatable component.\r\n *\r\n * Note: When drag and drop is avaiable upstream, this functionlity will likely be removed\r\n *\r\n * See: https://github.com/swimlane/ngx-datatable/issues/411\r\n */\r\n@Directive({\r\n  selector: 'ngx-datatable[dragulaName]'\r\n})\r\nexport class NgxDataTableDndDirective implements AfterViewInit, OnChanges, OnDestroy, OnInit {\r\n  @Input() public dragulaName: string;\r\n  @Input() public dragulaModel: any;\r\n  @Input() public dragulaClassSelector: string = 'null';\r\n  @Output() public dragulaDrop: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() public dragulaDrag: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  subscriptionDrag: any = null;\r\n  subscriptionDrop: any = null;\r\n\r\n  protected container: any;\r\n  private drake: any;\r\n  private el: ElementRef;\r\n  private dragulaService: DragulaService;\r\n\r\n  public constructor(el: ElementRef, dragulaService: DragulaService) {\r\n    this.el = el;\r\n    this.dragulaService = dragulaService;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.el) {\r\n      let container = this.el;\r\n\r\n      // Check for the row's parent node: datatable-scroller\r\n      // This is what you want to bind Dragula to, in order to drag sort\r\n      if (container.nativeElement.querySelector('datatable-scroller')) {\r\n        let rowParent =  container.nativeElement.querySelector('datatable-scroller');\r\n\r\n        // Check if this Dragula already exists\r\n        if (!this.dragulaService.find(this.dragulaName)) {\r\n\r\n          // Must assign the new rowParent as the container you want to pass to Dragula\r\n          this.container = rowParent;\r\n          this.initializeDragula();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: { dragulaModel?: SimpleChange }): void {\r\n\r\n    // Must update model on any changes\r\n    // Otherwise it will fall out of sync with the 'dragulaModel'\r\n    if (changes && changes.dragulaModel) {\r\n      if (this.drake) {\r\n        if (this.drake.models) {\r\n          let modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);\r\n          this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);\r\n        } else {\r\n          this.drake.models = [changes.dragulaModel.currentValue];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n\r\n    // Clear this Dragula always\r\n    // comment out if you want to keep it\r\n    if (this.dragulaService.find(this.dragulaName)) {\r\n      this.dragulaService.destroy(this.dragulaName);\r\n    }\r\n\r\n    // Clear DRAG and DROP subscription to prevent duplicates\r\n    if (this.subscriptionDrag) {\r\n      this.subscriptionDrag.unsubscribe();\r\n      this.subscriptionDrag = null;\r\n    }\r\n    if (this.subscriptionDrop) {\r\n      this.subscriptionDrop.unsubscribe();\r\n      this.subscriptionDrop = null;\r\n    }\r\n  }\r\n\r\n  protected initializeDragula() {\r\n    // console.log('initialized');\r\n    // Create new Dragula container\r\n    let bag = this.dragulaService.find(this.dragulaName);\r\n    if (bag) {\r\n      this.drake = bag.drake;\r\n      this.checkModel();\r\n      this.drake.containers.push(this.container);\r\n    } else {\r\n\r\n      // Check if dragulaClassSelector was specified\r\n      // *true:\r\n      //    - the dragulaClassSelector string will be used to match the class of the element clicked\r\n      //    - the element with the matching class name will be used to drag the row\r\n      // *false:\r\n      //    - no class selector will be used\r\n      //    - the whole row will default back to being draggable\r\n      if (this.dragulaClassSelector !== 'null') {\r\n        let classSelector = this.dragulaClassSelector;\r\n        let options = {\r\n          moves: function(el: any, container: any, handle: any) {\r\n            return handle.className === classSelector;\r\n          }\r\n        };\r\n        this.drake = dragula([this.container], options);\r\n      } else {\r\n        this.drake = dragula([this.container]);\r\n      }\r\n      this.checkModel();\r\n      this.dragulaService.add(this.dragulaName, this.drake);\r\n    }\r\n\r\n    // Set DRAG and DROP subscriptions and callbacks\r\n    this.subscriptionDrag = this.dragulaService.drag.subscribe((value: any) => {\r\n      this.drag(value.slice(1));\r\n    });\r\n    this.subscriptionDrop = this.dragulaService.drop.subscribe((value: any) => {\r\n      const [bagName, el, target, source] = value;\r\n\r\n      this.onDropModel(value.slice(1));\r\n    });\r\n  }\r\n\r\n  private checkModel() {\r\n    if (this.dragulaModel) {\r\n      if (this.drake.models) {\r\n        this.drake.models.push(this.dragulaModel);\r\n      } else {\r\n        this.drake.models = [this.dragulaModel];\r\n      }\r\n    }\r\n  }\r\n\r\n  private drag(args: any) {\r\n    let [e, el] = args;\r\n    // Todo: not implemented\r\n  }\r\n\r\n  private onDropModel(args: any) {\r\n    let [el, target, source] = args;\r\n\r\n    // Added emitter on any DROP action\r\n    // console.log('EMITTER', args);\r\n    this.dragulaDrop.emit(this.dragulaModel);\r\n  }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}