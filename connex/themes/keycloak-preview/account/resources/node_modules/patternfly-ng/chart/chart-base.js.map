{"version":3,"file":"chart-base.js","sourceRoot":"","sources":["../../../build/src/app/chart/chart-base.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AAIzB;;;;;GAKG;AACH;IAUE;;OAEG;IACH;QAZA;;;WAGG;QACO,gBAAW,GAAsB,IAAI,YAAY,EAAE,CAAC;IAQ/C,CAAC;IAEhB;;;;;OAKG;IACO,iCAAa,GAAvB,UAAwB,MAAuB,EAAE,MAAgB;QAAjE,iBAcC;QAbC,UAAU,CAAC;YACT,IAAI,QAAQ,GAAQ,SAAS,CAAC,MAAM,CAAC,CAAC;YACtC,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC;YAEvC,mGAAmG;YACnG,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;gBAChD,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,iEAAiE;gBACjE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;YACD,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC;IA9BS;QAAT,MAAM,EAAE;kCAAc,YAAY;kDAA2B;IA+BhE,gBAAC;CAAA,AApCD,IAoCC;SApCqB,SAAS","sourcesContent":["import { EventEmitter, Output } from '@angular/core';\n\nimport { cloneDeep } from 'lodash';\nimport * as c3 from 'c3';\n\nimport { ChartConfigBase } from './chart-config-base';\n\n/**\n * Chart base\n *\n * Note: In order to use charts, please include the following JavaScript file from patternfly. For example:\n * <code>require('patternfly/dist/js/patternfly-settings');</code>\n */\nexport abstract class ChartBase {\n  /**\n   * Event emitted with the chart reference after load is complete\n   * @type {EventEmitter}\n   */\n  @Output() chartLoaded: EventEmitter<any> = new EventEmitter();\n\n  // Store the chart object\n  private chart: any;\n\n  /**\n   * Default constructor\n   */\n  constructor() {}\n\n  /**\n   * Protected method called when configuration or data changes by any class that inherits from this\n   *\n   * @param config The config for the c3 chart\n   * @param reload True to reload\n   */\n  protected generateChart(config: ChartConfigBase, reload?: boolean): void {\n    setTimeout(() => {\n      let c3Config: any = cloneDeep(config);\n      c3Config.bindto = '#' + config.chartId;\n\n      // Note: Always re-generate donut pct chart because it's colors change based on data and thresholds\n      if (this.chart === undefined || reload === true) {\n        this.chart = c3.generate(c3Config);\n      } else {\n        // if chart is already created, then we only need to re-load data\n        this.chart.load(c3Config.data);\n      }\n      this.chartLoaded.emit(this.chart);\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}