{"version":3,"file":"inline-notification.component.js","sourceRoot":"","sources":["../../../../build/src/app/notification/inline-notification/inline-notification.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD;;;GAGG;AAMH;IAgCE;;OAEG;IACH;QAdA;;WAEG;QACM,WAAM,GAAY,KAAK,CAAC;QAEjC;;WAEG;QACqB,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;IAOnE,CAAC;IAED;;OAEG;IACI,wDAAkB,GAAzB;QACE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAxCQ;QAAR,KAAK,EAAE;kCAAO,gBAAgB;6DAAC;IAKvB;QAAR,KAAK,EAAE;;gEAAiB;IAKhB;QAAR,KAAK,EAAE;;+DAAgB;IAKf;QAAR,KAAK,EAAE;;oEAAsB;IAKrB;QAAR,KAAK,EAAE;;+DAAyB;IAKT;QAAvB,MAAM,CAAC,cAAc,CAAC;;qEAA4C;IA7BxD,2BAA2B;QALvC,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,0BAA0B;YACpC,QAAQ,EAAE,0nBAAwlB;SACnmB,CAAC;;OACW,2BAA2B,CA8CvC;IAAD,kCAAC;CAAA,AA9CD,IA8CC;SA9CY,2BAA2B","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { NotificationType } from '../notification-type';\n\n/**\n * Inline notifications can be used to provide notifications to user that can persist on the page\n * they are also optionally dismissable by the user\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-inline-notification',\n  template: `<div class=\"alert alert-{{type}}\" [ngClass]=\"{'alert-dismissable': dismissable === true}\" *ngIf=\"!hidden\"><button *ngIf=\"dismissable\" (click)=\"notificationRemove()\" type=\"button\" class=\"close\" aria-hidden=\"true\"><span class=\"pficon pficon-close\"></span></button> <span class=\"pficon pficon-ok\" *ngIf=\"type === 'success'\"></span> <span class=\"pficon pficon-info\" *ngIf=\"type === 'info'\"></span> <span class=\"pficon pficon-error-circle-o\" *ngIf=\"type === 'danger'\"></span> <span class=\"pficon pficon-warning-triangle-o\" *ngIf=\"type === 'warning'\"></span> <strong>{{header}}</strong> {{message}}</div>`\n})\nexport class InlineNotificationComponent {\n  /**\n   * The notification type (e.g., NotificationType.SUCCESS, NotificationType.INFO, etc.)\n   */\n  @Input() type: NotificationType;\n\n  /**\n   * The message to display within the notification\n   */\n  @Input() message: string;\n\n  /**\n   * The notification header\n   */\n  @Input() header: string;\n\n  /**\n   * Boolean to indicate whether or not notification can be dismissed\n   */\n  @Input() dismissable: boolean;\n\n  /**\n   * Indicates whether or not the notification is currently hidden\n   */\n  @Input() hidden: boolean = false;\n\n  /**\n   * The event emitted when the mouse hovers over and leaves a notification\n   */\n  @Output('hiddenChange') hiddenChange = new EventEmitter<boolean>();\n\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * Function called from the view when the notification is removed\n   */\n  public notificationRemove(): void {\n    this.hidden = true;\n    this.hiddenChange.emit(this.hidden);\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}