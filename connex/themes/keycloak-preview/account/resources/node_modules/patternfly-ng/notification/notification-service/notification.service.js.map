{"version":3,"file":"notification.service.js","sourceRoot":"","sources":["../../../../build/src/app/notification/notification-service/notification.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { Action } from '../../action/action';\nimport { Notification } from '../notification';\nimport { NotificationType } from '../notification-type';\n\n/**\n * Notification service used to notify user about important events in the application.\n *\n * You may configure the service with: setDelay, setVerbose and setPersist.\n */\n@Injectable()\nexport class NotificationService {\n\n  // time (in ms) the notifications are shown\n  private delay: number = 8000;\n  private modes: any = {};\n  private notifications: any = {};\n  private persist: any = { 'error': true, 'httpError': true };\n  private verbose: boolean = false;\n  private _notificationsSubject: Subject<Notification[]> = new Subject();\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n    this.notifications.data = [] as Notification[];\n    this.modes = [\n      { info: { type: NotificationType.INFO, header: 'Info!', log: 'info' } },\n      { success: { type: NotificationType.SUCCESS, header: 'Success!', log: 'info' } },\n      { error: { type: NotificationType.DANGER, header: 'Error!', log: 'error' } },\n      { warn: { type: NotificationType.WARNING, header: 'Warning!', log: 'warn' } }\n    ];\n    this.modes.forEach((mode: any, index: number) => {\n      this.notifications[index] = this.createNotifyMethod(index);\n    });\n  }\n\n  /**\n   * Get all notifications\n   */\n  getNotifications(): Notification[] {\n    return this.notifications.data;\n  }\n\n  /**\n   * Allows for interacting with a stream of notifications\n   */\n  get getNotificationsObserver(): Observable<Notification[]> {\n    return this._notificationsSubject.asObservable();\n  }\n\n  /**\n   * Generate a notification for the given HTTP Response\n   *\n   * @param message The notification message\n   * @param httpResponse The HTTP Response\n   */\n  httpError(message: string, httpResponse: any): void {\n    message += ' (' + (httpResponse.data.message || httpResponse.data.cause\n      || httpResponse.data.cause || httpResponse.data.errorMessage) + ')';\n    this.message('danger', 'Error!', message, this.persist.httpError, null, null);\n    if (this.verbose) {\n      console.log(message);\n    }\n  }\n\n  /**\n   * Generate a notification message\n   *\n   * @param type The notification type\n   * @param header The notification header\n   * @param message The notification message\n   * @param isPersistent True if the notification should be persistent\n   * @param primaryAction The primary action for the notifiaction\n   * @param moreActions More actions for the kebab\n   */\n  message(\n    type: string,\n    header: string,\n    message: string,\n    isPersistent: boolean,\n    primaryAction: Action,\n    moreActions: Action[]): void {\n      let notification = {\n        header: header,\n        isPersistent: isPersistent,\n        isViewing: false,\n        message: message,\n        moreActions: moreActions,\n        primaryAction: primaryAction,\n        showClose: false,\n        type: type,\n        visible: true\n      } as Notification;\n\n      this.notifications.data.push(notification);\n      this.updateNotificationsStream();\n\n      if (notification.isPersistent !== true) {\n        notification.isViewing = false;\n        setTimeout(() => {\n          notification.visible = false;\n          if (!notification.isViewing) {\n            this.remove(notification);\n          }\n        }, this.delay);\n      }\n    }\n\n  /**\n   * Remove notification\n   *\n   * @param notification The notification to remove\n   */\n  remove(notification: Notification): void {\n    let index = this.notifications.data.indexOf(notification);\n    if (index !== -1) {\n      this.removeIndex(index);\n      this.updateNotificationsStream();\n    }\n  }\n\n  /**\n   * Set the delay after which the notification is dismissed. The argument of this method expects miliseconds. Default\n   * delay is 8000 ms.\n   *\n   * @param delay The delay in ms\n   */\n  setDelay(delay: number): void {\n    this.delay = delay;\n  }\n\n  /**\n   * Sets persist option for particular modes. Notification with persistent mode won't be dismissed after delay, but has\n   * to be closed manually with the close button. By default, the \"error\" and \"httpError\" modes are set to persistent.\n   *\n   * @param persist Set to true to persist notifications\n   */\n  setPersist(persist: boolean): void {\n    this.persist = persist;\n  }\n\n  /**\n   * Set the verbose mode to on (default) or off. During the verbose mode, each notification is printed in the console.\n   *\n   * @param verbose Set to true for verbose mode\n   */\n  setVerbose(verbose: boolean): void {\n    this.verbose = verbose;\n  }\n\n  /**\n   * Set a flag indicating user is viewing the given notification\n   *\n   * @param notification The notification currently being viewed\n   * @param isViewing True if the notification is being viewed\n   */\n  setViewing(notification: Notification, isViewing: boolean): void {\n    notification.isViewing = isViewing;\n    if (isViewing !== true && notification.visible !== true) {\n      this.remove(notification);\n    }\n  }\n\n  // Private\n\n  private createNotifyMethod(index: number): any {\n    return (message: string, header: string, persistent: boolean, primaryAction: Action, moreActions: Action[]) => {\n      if (header !== undefined) {\n        header = this.modes[index].header;\n      }\n      if (persistent !== undefined) {\n        persistent = this.persist[index];\n      }\n      this.notifications.message(this.modes[index].type, header, message, persistent, primaryAction, moreActions);\n      if (this.verbose) {\n        console.log(message);\n      }\n    };\n  }\n\n  private removeIndex(index: number): void {\n    this.notifications.data.splice(index, 1);\n  }\n\n  private updateNotificationsStream(): void {\n    this._notificationsSubject.next(this.getNotifications());\n  }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}