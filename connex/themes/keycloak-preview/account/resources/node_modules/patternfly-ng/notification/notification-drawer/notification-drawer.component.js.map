{"version":3,"file":"notification-drawer.component.js","sourceRoot":"","sources":["../../../../build/src/app/notification/notification-drawer/notification-drawer.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { EmptyStateConfig } from '../../empty-state/empty-state-config';\nimport { NotificaitonGroup } from '../notification-group';\n\nimport { compact, filter, find, get, map, size, without } from 'lodash';\n\n\n/**\n * Component for rendering a notification drawer. This provides a common mechanism to handle how the\n * notification drawer should look and behave without mandating\n * the look of the notification group heading or notification body.\n *\n */\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-notification-drawer',\n  template: `<div class=\"drawer-pf\" [ngClass]=\"{'hide': hidden, 'drawer-pf-expanded': expanded}\"><div *ngIf=\"title\" class=\"drawer-pf-title\"><a *ngIf=\"allowExpand\" class=\"drawer-pf-toggle-expand fa fa-angle-double-left hidden-xs\" (click)=\"toggleExpandDrawer()\"></a> <a class=\"drawer-pf-close pficon pficon-close\" (click)=\"onClose()\"></a><div *ngIf=\"titleTemplate; then showTitleTemplate else showTitle\"></div><ng-template #showTitle><h3 class=\"text-center\">{{title}}</h3></ng-template><ng-template #showTitleTemplate [ngTemplateOutlet]=\"titleTemplate\"></ng-template></div><div *ngIf=\"!notificationGroups\"><pfng-empty-state [config]=\"emptyStateConfig\"></pfng-empty-state></div><div *ngIf=\"notificationGroups\" class=\"panel-group\"><div class=\"panel panel-default\" [ngClass]=\"{expanded: notificationGroup.open}\" *ngFor=\"let notificationGroup of notificationGroups, let index = index\"><div class=\"panel-heading\"><h4 class=\"panel-title\"><a *ngIf=\"!singleGroup\" (click)=\"toggleCollapse(notificationGroup)\" [ngClass]=\"{collapsed: !notificationGroup.open}\"><span><ng-template let-group=\"notificationGroup\" let-index=\"index\" [ngTemplateOutlet]=\"headingTemplate\" [ngTemplateOutletContext]=\"{group:notificationGroup, index: index}\"></ng-template></span></a></h4><ng-template class=\"panel-counter\" let-group=\"notificationGroup\" let-index=\"index\" [ngTemplateOutlet]=\"subHeadingTemplate\" [ngTemplateOutletContext]=\"{group:notificationGroup, index: index}\"></ng-template></div><div class=\"panel-collapse collapse\" [ngClass]=\"{in: notificationGroup.open || notificationGroups.length === 1}\"><div *ngIf=\"hasNotifications(notificationGroup)\" class=\"panel-body\"><div class=\"drawer-pf-notification\" [ngClass]=\"{unread: !notification.isViewing, 'expanded-notification': expanded}\" *ngFor=\"let notification of notificationGroup.notifications trackBy notificationTrackField, let index = index\"><ng-template let-notify=\"notification\" let-index=\"index\" [ngTemplateOutlet]=\"notificationBodyTemplate\" [ngTemplateOutletContext]=\"{notify:notification, index: index}\"></ng-template></div><div *ngIf=\"notificationGroup.loading\" class=\"drawer-pf-loading text-center\"><span class=\"spinner spinner-xs spinner-inline\"></span> Loading More</div></div><div *ngIf=\"(showClearAll || showMarkAllRead) && hasNotifications(notificationGroup)\" class=\"drawer-pf-action\"><span class=\"drawer-pf-action-link\" *ngIf=\"showMarkAllRead && hasUnread(notificationGroup)\"><button class=\"btn btn-link\" (click)=\"onMarkAllRead(notificationGroup)\">Mark All Read</button> </span><span class=\"drawer-pf-action-link\"><button class=\"btn btn-link\" *ngIf=\"showClearAll\" (click)=\"onClearAll(notificationGroup)\"><span class=\"pficon pficon-close\"></span> Clear All</button></span></div><div *ngIf=\"!hasNotifications(notificationGroup)\"><div class=\"panel-body\"><pfng-empty-state [config]=\"notificationGroup.emptyStateConfig\"></pfng-empty-state></div></div><ng-template *ngIf=\"notificationFooterTemplate\" [ngTemplateOutlet]=\"notificationFooterTemplate\"></ng-template></div></div></div></div>`\n})\n\nexport class NotificationDrawerComponent implements OnInit {\n\n\n\n  /**\n   * A config containing properties for empty state when no notification are available\n   */\n  emptyStateConfig?: EmptyStateConfig;\n\n\n  /**\n   * Flag if the drawer is currently hidden\n   */\n  @Input() hidden: boolean;\n\n\n  /**\n   * Flag if the drawer can be expanded. Optional, default: false\n   */\n  @Input() allowExpand: boolean = false;\n\n\n  /**\n   * Flag if the drawer is expanded (only valid if allowExpand is true). Optional, default: false\n   */\n  @Input() expanded: boolean = false;\n\n\n  /**\n   * Title to display for the drawer (leaving this blank will remove the provided expand capability)\n   */\n  @Input() title: string;\n\n\n  /**\n   * Collection notification groups to add to the drawer. Alternatively, a single group object\n   * can be given if categorization is not used.\n   */\n  @Input() notificationGroups: NotificaitonGroup[];\n\n\n  /**\n   * Optional field from the notifications to use to track by in the notifications listing ($index used otherwise).\n   */\n  @Input() notificationTrackField: string;\n\n\n\n  /**\n   * Flag if the mark all read button should be shown, optional, default is false\n   */\n  @Input() showMarkAllRead: boolean = false;\n\n\n\n  /**\n   * Flag if the clear all button should be shown, optional, default is false\n   */\n  @Input() showClearAll: boolean;\n\n\n\n  /**\n   * Template for the title area for the notification drawer, use this\n   * to customize the drawer title area\n   */\n  @Input() titleTemplate: TemplateRef<any>;\n\n\n  /**\n   * Template for the heading area for each notification group,\n   *  access the group via notificationGroup\n   */\n  @Input() headingTemplate: TemplateRef<any>;\n\n\n  /**\n   * Template for the sub-heading area for each notification group,\n   * access the group via notificationGroup\n   */\n  @Input() subHeadingTemplate: TemplateRef<any>;\n\n\n\n  /**\n   * Template for the notification body for each notification,\n   * access the notification via notification\n   */\n  @Input() notificationBodyTemplate: TemplateRef<any>;\n\n\n  /**\n   * Template for the notification footer for each notification,\n   * access the notification via notification\n   */\n  @Input() notificationFooterTemplate: TemplateRef<any>;\n\n\n  /**\n   * Text to show when there are no notifications. Optional.\n   */\n  @Input() noNotificationsText: string;\n\n\n  /**\n   * Boolean flag if size of group less 2\n   */\n  @Input() singleGroup: boolean;\n\n\n  /**\n   * Event emitter when close icon clicked\n   */\n  @Output('close') close = new EventEmitter<boolean>();\n\n  /**\n   * Event emitter when mark all button clicked\n   */\n  @Output('unreadNotifications') unreadNotifications = new EventEmitter<boolean>();\n\n  /**\n   * count unread notifications\n   */\n  private unreadCount: number;\n\n  /**\n   * count read count\n   */\n  private markreadCount: number;\n\n\n\n  /** \n   * method for the close button, emits event with clicked over close icon\n   *  \n   */\n  onClose(): void {\n    this.hidden = true;\n    this.close.emit(this.hidden);\n  }\n\n\n  /**\n   * Method for the mark all read button (Optional)\n   * @param group \n   */\n  onMarkAllRead(group: NotificaitonGroup): void {\n    group.notifications.forEach(n => n.isViewing = true);\n    this.updateReadCount();\n  }\n\n  /**\n   * Toggle to expand the drawer\n   */\n  toggleExpandDrawer(): void {\n    if (this.allowExpand)\n      this.expanded = !this.expanded;\n  }\n\n\n  /**\n   *  Return boolean if group has unread notifications\n   *  @param group \n   */\n  hasUnread(group: NotificaitonGroup): boolean {\n    return size(filter(get(group, 'notifications'), { 'isViewing': false })) > 0;\n  }\n\n\n  /**\n   *  Return boolean if group has notifications\n   *  @param group \n   */\n  hasNotifications(group: NotificaitonGroup[]): boolean {\n    return size(get(group, 'notifications')) > 0;\n  }\n\n\n\n  /**\n   *  Method for the clear all button (Optional)\n   *  @param group \n   */\n  onClearAll(group: NotificaitonGroup): void {\n    group.notifications = null;\n    group.subHeading = '0 New Events';\n  }\n\n\n\n  /**\n   *  Toggle to show / hide drawer\n   *  @param group \n   */\n  toggleCollapse(group: NotificaitonGroup): void {\n    if (group.open) {\n      group.open = false;\n    } else {\n      this.collapseOpenGroups();\n      group.open = true;\n    }\n  }\n\n\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.collapseOpenGroups();\n    this.singleGroup = size(this.notificationGroups) < 2;\n    this.markreadCount = 0;\n    this.setEmptyConfig();\n    this.readCountConfig();\n  }\n\n\n\n  /**\n   * The default constructor\n   */\n  constructor() { }\n\n\n  /**\n   * Collapse panel for all groups\n   */\n  private collapseOpenGroups(): void {\n    this.notificationGroups.forEach(grp => grp.open = false);\n  }\n\n\n  /**\n   * Emit event during the inital load based on total unread notification\n   */\n  private readCountConfig(): void {\n    this.unreadCount = this.totalUnreadNotifications(this.notificationGroups);\n    if (this.unreadCount > 0) {\n      this.unreadNotifications.emit(true);\n    } else {\n      this.unreadNotifications.emit(false);\n    }\n  }\n\n\n  /**\n   * Empty config setup\n   */\n  private setEmptyConfig(): void {\n    this.emptyStateConfig = {\n      iconStyleClass: 'pficon-info',\n      title: this.noNotificationsText || this.noNotificationsText || 'There are no notifications to display.'\n    };\n  }\n\n  /**\n   * Total number of unread notifications\n   * @param groups \n   */\n  private totalUnreadNotifications(groups: NotificaitonGroup[]): number {\n    return size(filter(\n      groups.map(g => filter(get(g, 'notifications'), { 'isViewing': false }).length > 0),\n      o => { return o === true; }));\n  }\n\n\n  /**\n   * Emit event when no unread notifications are remains\n   */\n  private updateReadCount(): void {\n    this.markreadCount = this.markreadCount + 1;\n    if (this.markreadCount === this.unreadCount) {\n      this.unreadNotifications.emit(false);\n    }\n  }\n\n}\n\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}