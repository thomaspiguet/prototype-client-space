{"version":3,"file":"list-base.js","sourceRoot":"","sources":["../../../build/src/app/list/list-base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\n\nimport { Action } from '../action/action';\nimport { ListBaseConfig } from './list-base-config';\nimport { ListEvent } from './list-event';\n\n/**\n * List base\n */\nexport abstract class ListBase {\n  /**\n   * The name of the template containing actions for each item\n   */\n  @Input() actionTemplate: TemplateRef<any>;\n\n  /**\n   * An array of items to display in the list\n   */\n  @Input() items: any[];\n\n  /**\n   * The name of the template containing item layout\n   */\n  @Input() itemTemplate: TemplateRef<any>;\n\n  /**\n   * The event emitted when an action (e.g., button, kebab, etc.) has been selected\n   */\n  @Output('onActionSelect') onActionSelect = new EventEmitter();\n\n  /**\n   * The event emitted when an item has been clicked\n   */\n  @Output('onClick') onClick = new EventEmitter();\n\n  /**\n   * The event emitted when an item is double clicked\n   */\n  @Output('onDblClick') onDblClick = new EventEmitter();\n\n  /**\n   * The event emitted when an item selection has been changed\n   */\n  @Output('onSelectionChange') onSelectionChange = new EventEmitter();\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    let config = this.getConfig();\n    if (config.multiSelect === undefined || config.multiSelect === false) {\n      let selectedItems = this.getSelectedItems(this.items);\n      if (selectedItems.length > 0) {\n        this.selectSingleItem(selectedItems[0]);\n      }\n    }\n    if (config.multiSelect && config.dblClick) {\n      throw new Error('ListComponent - Illegal use: ' +\n        'Cannot use both multi-select and double click selection at the same time.');\n    }\n    if (config.selectItems && config.showCheckbox) {\n      throw new Error('ListComponent - Illegal use: ' +\n        'Cannot use both checkbox and click selection at the same time.');\n    }\n    if (config.selectItems && config.showRadioButton) {\n      throw new Error('ListComponent - Illegal use: ' +\n        'Cannot use both radio button and single row selection at the same time.');\n    }\n    if (config.showRadioButton && config.showCheckbox) {\n      throw new Error('ListComponent - Illegal use: ' +\n        'Cannot use both radio button and checkbox at the same time.');\n    }\n  }\n\n  /**\n   * Return component config\n   *\n   * @returns {ListBaseConfig} The component config\n   */\n  protected abstract getConfig(): ListBaseConfig;\n\n  // Accessors\n\n  /**\n   * Get the flag indicating list has no items\n   *\n   * @returns {boolean} The flag indicating list has no items\n   */\n  get itemsEmpty(): boolean {\n    return !(this.items !== undefined && this.items.length > 0);\n  }\n\n  // Actions\n\n  /**\n   * Helper to generate action select event\n   *\n   * @param {Action} action The selected action\n   */\n  protected handleAction(action: Action): void {\n    if (action && action.disabled !== true) {\n      this.onActionSelect.emit(action);\n    }\n  }\n\n  // Selection\n\n  /**\n   * Helper to generate selection change event\n   *\n   * @param item The selected item\n   */\n  protected checkboxChange(item: any): void {\n    this.onSelectionChange.emit({\n      item: item,\n      selectedItems: this.getSelectedItems(this.items)\n    } as ListEvent);\n  }\n\n  /**\n   * Helper to generate double click event\n   *\n   * @param {MouseEvent} $event The triggered event\n   * @param item The double clicked item\n   */\n  protected dblClick($event: MouseEvent, item: any): void {\n    let config = this.getConfig();\n    if (config.dblClick === true) {\n      this.onDblClick.emit({\n        item: item\n      } as ListEvent);\n    }\n  }\n\n  /**\n   * Helper to deselect given items items and children\n   *\n   * @param {any[]} items The items to be deselected\n   */\n  protected deselectItems(items: any[]): void {\n    if (items !== undefined) {\n      for (let i = 0; i < items.length; i++) {\n        items[i].selected = false;\n        if (Array.isArray(items[i].children)) {\n          this.deselectItems(items[i].children);\n        }\n      }\n    }\n  }\n\n  /**\n   * Helper to retrieve selected items\n   *\n   * @param {any[]} items The items containing possible selections\n   * @returns {any[]} A list of selected items\n   */\n  protected getSelectedItems(items: any[]): any[] {\n    let selectedItems = [];\n    if (items !== undefined) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].selected) {\n          selectedItems.push(items[i]);\n        }\n        if (Array.isArray(items[i].children)) {\n          let selectedChildren = this.getSelectedItems(items[i].children);\n          selectedItems = selectedItems.concat(selectedChildren);\n        }\n      }\n    }\n    return selectedItems;\n  }\n\n  /**\n   * Helper to generate selection change event\n   *\n   * @param item The selected item\n   */\n  protected radioButtonChange(item: any): void {\n    let selected = item.selected;\n\n    this.deselectItems(this.items);\n    if (!selected) {\n      this.selectSingleItem(item);\n    }\n\n    this.onSelectionChange.emit({\n      item: item,\n      selectedItems: this.getSelectedItems(this.items)\n    } as ListEvent);\n  }\n\n  /**\n   * Helper to select a single item and deselect all others\n   *\n   * @param item The item to select\n   */\n  protected selectSingleItem(item: any): void {\n    this.deselectItems(this.items);\n    item.selected = true;\n  }\n\n  /**\n   * Select or deselect an item\n   *\n   * @param item The item to select or deselect\n   * @param {boolean} selected True if item should be selected\n   */\n  selectItem(item: any, selected: boolean): void {\n    let config = this.getConfig();\n\n    // Are we using checkboxes or radiobuttons?\n    if (config.showCheckbox) {\n      item.selected = selected;\n      return;\n    }\n    if (config.showRadioButton) {\n      this.deselectItems(this.items);\n      this.selectSingleItem(item);\n      return;\n    }\n\n    // Multiple item selection\n    if (config.multiSelect && !config.dblClick) {\n      item.selected = selected;\n    } else {\n      // Single item selection\n      this.deselectItems(this.items);\n      this.selectSingleItem(item);\n    }\n  }\n\n  /**\n   * Helper to toggle item selection\n   *\n   * @param {MouseEvent} $event The triggered event\n   * @param item The item to select\n   */\n  protected toggleSelection($event: MouseEvent, item: any): void {\n    let config = this.getConfig();\n    let selectionChanged = false;\n\n    // Always emit click event\n    this.onClick.emit({\n      item: item\n    } as ListEvent);\n\n    // Go no further if click selection isn't enabled\n    if (!config.selectItems) {\n      return;\n    }\n\n    // Multiple item selection\n    if (config.multiSelect && !config.dblClick) {\n      // Item's 'selected' prop may be undefined initially\n      if (item.selected === true) {\n        item.selected = false;\n      } else {\n        item.selected = true;\n      }\n      selectionChanged = true;\n    } else {\n      // Single item selection\n      if (item.selected === true) {\n        // Avoid accidentally deselecting by dblClick\n        if (!config.dblClick) {\n          this.deselectItems(this.items);\n          selectionChanged = true;\n        }\n      } else {\n        this.selectSingleItem(item);\n        selectionChanged = true;\n      }\n    }\n\n    // Emit event only if selection changed\n    if (selectionChanged === true) {\n      this.onSelectionChange.emit({\n        item: item,\n        selectedItems: this.getSelectedItems(this.items)\n      } as ListEvent);\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}