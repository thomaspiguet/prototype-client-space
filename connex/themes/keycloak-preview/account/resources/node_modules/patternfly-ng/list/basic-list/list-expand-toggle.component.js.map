{"version":3,"file":"list-expand-toggle.component.js","sourceRoot":"","sources":["../../../../build/src/app/list/basic-list/list-expand-toggle.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,KAAK,EAEL,WAAW,EACX,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB;;;;GAIG;AAMH;IAgBE;;OAEG;IACH;IACA,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,4CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;QACzE,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;IASD,sBAAI,iDAAU;QAPd,UAAU;QAEV;;;;WAIG;aACH;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/E,CAAC;;;OAAA;IAED;;OAEG;IACH,gDAAY,GAAZ;QACE,2BAA2B;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACnC,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC3C,CAAC;IAtDQ;QAAR,KAAK,EAAE;;+DAAkB;IAKjB;QAAR,KAAK,EAAE;;2DAAW;IAKV;QAAR,KAAK,EAAE;kCAAW,WAAW;+DAAM;IAdzB,yBAAyB;QALrC,SAAS,CAAC;YACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,yBAAyB;YACnC,QAAQ,EAAE,oSAAoR;SAC/R,CAAC;;OACW,yBAAyB,CA2DrC;IAAD,gCAAC;CAAA,AA3DD,IA2DC;SA3DY,yBAAyB","sourcesContent":["import {\n  Component,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\n/**\n * List compund expansion toggle component.\n *\n * This is intended to be used with the list component's itemExpandTemplate\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-list-expand-toggle',\n  template: `<div class=\"list-pf-chevron\" (click)=\"toggleExpand()\"><span class=\"fa fa-angle-right\" [ngClass]=\"{'fa-angle-down': isExpanded}\"></span><ng-template *ngIf=\"template\" let-item=\"item\" [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ item: item }\"></ng-template></div>`\n})\nexport class ListExpandToggleComponent implements OnInit {\n  /**\n   * The id of the template used to contain expandable content for each item\n   */\n  @Input() expandId: string;\n\n  /**\n   * The items displayed in the current list item\n   */\n  @Input() item: any;\n\n  /**\n   * The name of the template containing elements shown in the toggle body\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    if (this.item === undefined) {\n      throw new Error('ListCompoundToggleComponent: item attribute not set');\n    }\n    if (this.expandId === undefined) {\n      throw new Error('ListCompoundToggleComponent: expandId attribute not set');\n    }\n  }\n\n  // Actions\n\n  /**\n   * Test if item is expanded based on given expand item ID\n   *\n   * @returns {boolean} True if item is expanded\n   */\n  get isExpanded(): boolean {\n    return (this.item.expanded === true && this.item.expandId === this.expandId);\n  }\n\n  /**\n   * Toggle expand item open/close\n   */\n  toggleExpand(): void {\n    // Item may already be open\n    if (this.item.expanded && this.item.expandId !== this.expandId) {\n      this.item.expandId = this.expandId;\n      return;\n    }\n    this.item.expandId = this.expandId;\n    this.item.expanded = !this.item.expanded;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}