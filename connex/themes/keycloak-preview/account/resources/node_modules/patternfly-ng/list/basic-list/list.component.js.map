{"version":3,"file":"list.component.js","sourceRoot":"","sources":["../../../../build/src/app/list/basic-list/list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\nimport { ListBase } from '../list-base';\nimport { ListConfig } from './list-config';\nimport { ListEvent } from '../list-event';\n\n/**\n * List component\n *\n * For items, use a template named itemTemplate to contain content for each item. For each item in the items array, the\n * expansion can be disabled by setting disabled to true on the item. If using actions, use a template named\n * actionTemplate to contain expandable content for the actions of each item. If using expand items, use a template\n * named itemExpandedTemplate to contain expandable content for each item.\n *\n * Cannot use both multi-select and double click selection at the same time\n * Cannot use both checkbox and click selection at the same time\n *\n * Usage:\n * <br/><code>import { BasicListModule } from 'patternfly-ng/list';</code>\n *\n * Or:\n * <br/><code>import { BasicListModule } from 'patternfly-ng';</code>\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-list',\n  template: `<div class=\"list-pf\" *ngIf=\"!itemsEmpty\"><div class=\"list-pf-item pfng-list-heading {{item?.itemStyleClass}}\" *ngIf=\"itemHeadingTemplate || actionHeadingTemplate\"><div class=\"list-pf-container\"><div class=\"pfng-list-pin-placeholder\" *ngIf=\"config.usePinItems\"></div><div class=\"list-pf-chevron\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\"></div></div><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox || config.showRadioButton\"><div class=\"pfng-list-cb-placeholder\"></div></div><div class=\"list-pf-content list-pf-content-flex\"><div class=\"pfng-list-content\"><ng-template *ngIf=\"itemHeadingTemplate\" [ngTemplateOutlet]=\"itemHeadingTemplate\" [ngTemplateOutletContext]=\"{ item: item, index: i }\"></ng-template></div><div class=\"list-pf-actions\"><ng-template *ngIf=\"actionHeadingTemplate\" [ngTemplateOutlet]=\"actionHeadingTemplate\" [ngTemplateOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div></div><div class=\"list-pf-item {{item?.itemStyleClass}}\" [ngClass]=\"{'active': item.selected || item.isItemExpanded}\" *ngFor=\"let item of (config.usePinItems ? (items | sortArray: 'showPin': true) : items); let i = index\"><div class=\"list-pf-container\"><div class=\"pfng-list-pin-container\" *ngIf=\"config.usePinItems\"><div class=\"pfng-list-pin-placeholder\" [ngClass]=\"{'multi-ctrls': config.useExpandItems || config.showCheckbox || config.showRadioButton}\" *ngIf=\"item.showPin !== true\"></div><div class=\"pfng-list-pin\" [ngClass]=\"{'multi-ctrls': config.useExpandItems || config.showCheckbox || config.showRadioButton}\" *ngIf=\"item.showPin === true\"><a href=\"javascript:void(0);\" tabindex=\"-1\" title=\"Remove pin\" (click)=\"togglePin($event, item)\"><span class=\"fa fa-thumb-tack\"></span></a></div></div><div class=\"list-pf-chevron pfng-list-expand\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\" *ngIf=\"item.hideExpandToggle === true\"></div><span class=\"fa fa-angle-right\" *ngIf=\"item.hideExpandToggle !== true\" (click)=\"toggleExpandArea(item)\" [ngClass]=\"{'fa-angle-down': item.expanded && item.expandId === undefined}\"></span></div><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox && !config.showRadioButton\"><input type=\"checkbox\" [(ngModel)]=\"item.selected\" (ngModelChange)=\"checkboxChange(item)\"></div><div class=\"list-pf-select\" *ngIf=\"!config.showCheckbox && config.showRadioButton\"><input type=\"radio\" [checked]=\"item.selected\" (click)=\"radioButtonChange(item)\"></div><div class=\"list-pf-content list-pf-content-flex\"><div class=\"pfng-list-content\" (click)=\"toggleSelection($event, item)\" (dblclick)=\"dblClick($event, item)\"><ng-template *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{ item: item, index: i }\"></ng-template></div><div class=\"list-pf-actions\"><ng-template *ngIf=\"actionTemplate\" [ngTemplateOutlet]=\"actionTemplate\" [ngTemplateOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div><div class=\"pfng-list-expansion list-pf-expansion collapse in\" *ngIf=\"expandTemplate && item.expanded\"><div class=\"list-pf-container\" tabindex=\"0\"><div class=\"list-pf-content\"><div class=\"close\" *ngIf=\"config.hideClose !== true\"><span class=\"pficon pficon-close\" (click)=\"closeExpandArea(item)\"></span></div><ng-template [ngTemplateOutlet]=\"expandTemplate\" [ngTemplateOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div></div></div><pfng-empty-state *ngIf=\"itemsEmpty\" [config]=\"config.emptyStateConfig\" (onActionSelect)=\"handleAction($event)\"></pfng-empty-state>`\n})\nexport class ListComponent extends ListBase implements DoCheck, OnInit {\n  /**\n   * The name of the template containing action heading layout\n   */\n  @Input() actionHeadingTemplate: TemplateRef<any>;\n\n  /**\n   * The list config containing component properties\n   */\n  @Input() config: ListConfig;\n\n  /**\n   * The name of the template used to contain expandable content for each item\n   */\n  @Input() expandTemplate: TemplateRef<any>;\n\n  /**\n   * The name of the template containing item heading layout\n   */\n  @Input() itemHeadingTemplate: TemplateRef<any>;\n\n  /**\n   * The event emitted when an item pin has been changed\n   */\n  @Output('onPinChange') onPinChange = new EventEmitter();\n\n  private defaultConfig = {\n    dblClick: false,\n    hideClose: false,\n    multiSelect: false,\n    selectedItems: [],\n    selectionMatchProp: 'uuid',\n    selectItems: false,\n    showCheckbox: false,\n    showRadioButton: false,\n    useExpandItems: false\n  } as ListConfig;\n  private prevConfig: ListConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n    super();\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    super.setupConfig();\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  /**\n   * Return component config\n   *\n   * @returns {} ListConfig The component config\n   */\n  protected getConfig(): ListConfig {\n    return this.config;\n  }\n\n  // Toggle\n\n  private closeExpandArea(item: any): void {\n    item.expandId = undefined;\n    item.expanded = false;\n  }\n\n  private toggleExpandArea(item: any): void {\n    // Item may already be open due to compound expansion\n    if (item.expanded && item.expandId !== undefined) {\n      item.expandId = undefined;\n      return;\n    }\n    item.expandId = undefined;\n    item.expanded = !item.expanded;\n  }\n\n  private togglePin($event: MouseEvent, item: any): void {\n    item.showPin = (item.showPin === undefined) ? true : !item.showPin;\n    this.onPinChange.emit({\n      item: item\n    } as ListEvent);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}