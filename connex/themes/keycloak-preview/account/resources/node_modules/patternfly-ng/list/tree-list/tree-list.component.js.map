{"version":3,"file":"tree-list.component.js","sourceRoot":"","sources":["../../../../build/src/app/list/tree-list/tree-list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { TreeComponent } from 'angular-tree-component';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\nimport { ListBase } from '../list-base';\nimport { TreeListConfig } from './tree-list-config';\n\n/**\n * Tree List component\n *\n * For items, use a template named itemTemplate to contain content for each item. If using actions, use a template named\n * actionTemplate to contain expandable content for the actions of each item. Use the loadTemplate to customize lazy\n * loading messages.\n *\n * Cannot use both multi-select and double click selection at the same time\n * Cannot use both checkbox and click selection at the same time\n *\n * For angular-tree-component options, see: https://angular2-tree.readme.io/docs\n *\n * Usage:\n * <br/><code>import { TreeListModule } from 'patternfly-ng/list';</code>\n *\n * Or:\n * <br/><code>import { TreeListModule } from 'patternfly-ng';</code>\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-tree-list',\n  template: `<div class=\"list-pf\" *ngIf=\"!itemsEmpty\"><tree-root class=\"pfng-tree-list\" #tree [nodes]=\"items\" [focused]=\"true\" [options]=\"config.treeOptions\" (event)=\"handleEvent($event)\" (moveNode)=\"handleMoveNode($event)\" (toggleExpanded)=\"handleToggleExpanded($event)\"><ng-template #treeNodeTemplate let-node let-index=\"index\"><ng-template [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{ node: node, index: index }\"></ng-template></ng-template><ng-template #loadingTemplate let-node let-index=\"index\"><ng-template [ngTemplateOutlet]=\"loadTemplate\" [ngTemplateOutletContext]=\"{ node: node, index: index }\"></ng-template></ng-template><ng-template #treeNodeFullTemplate let-node=\"node\" let-index=\"index\" let-templates=\"templates\"><div *ngIf=\"node.isHidden !== true\" class=\"tree-node\" [ngClass]=\"node.getClass()\" [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\" [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\" [class.tree-node-leaf]=\"node.isLeaf\" [class.tree-node-active]=\"node.isActive\" [class.tree-node-focused]=\"node.isFocused\"><div class=\"list-pf-item\" [class.active]=\"node.data.selected\" [class.tree-item-placeholder]=\"index !== 0\" [class.tree-item-selected]=\"node.data.selected\"><tree-node-drop-slot *ngIf=\"index === 0\" [dropIndex]=\"node.index\" [node]=\"node.parent\"></tree-node-drop-slot><div class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\"><div class=\"node-content-wrapper\" (click)=\"node.mouseAction('click', $event)\" (dblclick)=\"node.mouseAction('dblClick', $event)\" (contextmenu)=\"node.mouseAction('contextMenu', $event)\" (dragstart)=\"handleDragStart($event)\" (treeDrop)=\"node.onDrop($event)\" [treeAllowDrop]=\"node.allowDrop\" [treeDrag]=\"node\" [treeDragEnabled]=\"node.allowDrag()\"><div class=\"list-pf-container\" [class.pfng-tree-list-dnd-slot]=\"index === 0\" [class.pfng-tree-list-dnd]=\"node.allowDrag()\" [style.padding-left.px]=\"getIndentChildren(node.level, node)\"><div class=\"list-pf-chevron\"><tree-node-expander [node]=\"node\"></tree-node-expander></div><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox && !config.showRadioButton\"><input type=\"checkbox\" value=\"node.data.selected\" [(ngModel)]=\"node.data.selected\" (ngModelChange)=\"checkboxChange(node.data)\"></div><div class=\"list-pf-select\" *ngIf=\"!config.showCheckbox && config.showRadioButton\"><input type=\"radio\" value=\"node.data.selected\" [checked]=\"node.data.selected\" (click)=\"radioButtonChange(node.data)\"></div><div class=\"list-pf-content list-pf-content-flex\"><div class=\"pfng-tree-list-content\" (click)=\"toggleSelection($event, node.data)\" (dblclick)=\"dblClick($event, node.data)\"><ng-template [ngTemplateOutlet]=\"itemTemplate\" [ngTemplateOutletContext]=\"{ node: node, index: index }\"></ng-template></div><div class=\"list-pf-actions\" *ngIf=\"actionTemplate\"><ng-template [ngTemplateOutlet]=\"actionTemplate\" [ngTemplateOutletContext]=\"{ node: node, index: index }\"></ng-template></div></div></div></div></div><tree-node-drop-slot [dropIndex]=\"node.index + 1\" [node]=\"node.parent\"></tree-node-drop-slot></div><tree-node-children [node]=\"node\" [templates]=\"templates\"></tree-node-children></div></ng-template></tree-root></div><pfng-empty-state *ngIf=\"itemsEmpty\" [config]=\"config.emptyStateConfig\" (onActionSelect)=\"handleAction($event)\"></pfng-empty-state>`\n})\n\nexport class TreeListComponent extends ListBase implements DoCheck, OnInit {\n  /**\n   * The tree list config containing component properties\n   */\n  @Input() config: TreeListConfig;\n\n  /**\n   * The name of the template containing loading layout\n   */\n  @Input() loadTemplate: TemplateRef<any>;\n\n  /**\n   * Catch-all event that is triggered for angular-tree-component\n   */\n  @Output('onEvent') onEvent = new EventEmitter();\n\n  /**\n   * This event is fired any time moveNode is called for angular-tree-component\n   */\n  @Output('onMoveNode') onMoveNode = new EventEmitter();\n\n  /**\n   * Triggers when expanding / collapsing angular-tree-component nodes\n   */\n  @Output('onToggleExpanded') onToggleExpanded = new EventEmitter();\n\n  /**\n   * The underlying tree for angular-tree-component\n   */\n  @ViewChild(TreeComponent) private tree: TreeComponent;\n\n  private defaultConfig = {\n    dblClick: false,\n    indentChildren: 80,\n    multiSelect: false,\n    treeOptions: {\n      allowDrag: false\n    },\n    selectedItems: [],\n    selectionMatchProp: 'uuid',\n    selectItems: false,\n    showCheckbox: false,\n    showRadioButton: false\n  } as TreeListConfig;\n  private prevConfig: TreeListConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n    super();\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    super.setupConfig();\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  /**\n   * Return component config\n   *\n   * @returns {TreeListConfig} The component config\n   */\n  protected getConfig(): TreeListConfig {\n    return this.config;\n  }\n\n  /**\n   * Helper to update angular-tree-component model\n   *\n   * After adding or removing nodes from the tree, the update method must be called\n   * on the treeModel for it to take affect.\n   *\n   * See: https://angular2-tree.readme.io/docs/changing-the-tree\n   */\n  update(): void {\n    this.tree.treeModel.update();\n  }\n\n  // Drag and drop\n\n  private handleDragStart($event: any) {\n    // Drag effect: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API\n    $event.dataTransfer.effectAllowed = 'copyMove';\n  }\n\n  // Tree events\n\n  private handleEvent($event: any): void {\n    this.onEvent.emit($event);\n  }\n\n  private handleMoveNode($event: any): void {\n    this.onMoveNode.emit($event);\n  }\n\n  private handleToggleExpanded($event: any): void {\n    this.onToggleExpanded.emit($event);\n  }\n\n  /**\n   * Get children indent in pixels\n   *\n   * @param {number} nodeLevel The level of the given node in the tree\n   * @returns {string} The indent in pixels\n   */\n  private getIndentChildren(nodeLevel: number): string {\n    return (nodeLevel > 1) ? (nodeLevel - 1) * this.config.indentChildren + '' : '';\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}