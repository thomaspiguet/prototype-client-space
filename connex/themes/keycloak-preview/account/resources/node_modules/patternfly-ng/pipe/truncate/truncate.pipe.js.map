{"version":3,"file":"truncate.pipe.js","sourceRoot":"","sources":["../../../../build/src/app/pipe/truncate/truncate.pipe.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AAEpD;;;;GAIG;AAEH;IAAA;IAYA,CAAC;IAXC;;;;;;;OAOG;IACH,gCAAS,GAAT,UAAU,KAAa,EAAE,KAAkB,EAAE,KAAqB;QAAzC,sBAAA,EAAA,UAAkB;QAAE,sBAAA,EAAA,aAAqB;QAChE,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;IAC5E,CAAC;IAXU,YAAY;QADxB,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC;OACb,YAAY,CAYxB;IAAD,mBAAC;CAAA,AAZD,IAYC;SAZY,YAAY","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Truncate pipe\n *\n * This is currently used with the save filter feature of the filter fields component\n */\n@Pipe({ name: 'truncate'})\nexport class TruncatePipe implements PipeTransform {\n  /**\n   * Truncate given string\n   *\n   * @param {string} value The string to truncate\n   * @param {string} limit The number of characters to truncate the string at\n   * @param {string} trail The trailing characters representing truncation\n   * @returns {string} The truncated string\n   */\n  transform(value: string, limit: number = 10, trail: string = '...'): string {\n    return (value.length > limit) ? value.substring(0, limit) + trail : value;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}