{"version":3,"file":"filter.component.js","sourceRoot":"","sources":["../../../build/src/app/filter/filter.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { cloneDeep, defaults, find, isEqual, remove } from 'lodash';\n\nimport { Filter } from './filter';\nimport { FilterConfig } from './filter-config';\nimport { FilterEvent } from './filter-event';\nimport { FilterFieldsComponent } from './filter-fields.component';\nimport { FilterType } from './filter-type';\n\n/**\n * Filter component\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-filter',\n  template: `<div class=\"filter-pf\"><pfng-filter-fields #filterFields [config]=\"config\" (onAdd)=\"addFilter($event)\" (onDelete)=\"deleteQuery($event)\" (onFieldSelect)=\"fieldSelected($event)\" (onTypeAhead)=\"typeAhead($event)\"></pfng-filter-fields><pfng-filter-results [config]=\"config\" (onClear)=\"clearFilter($event)\" (onSave)=\"saveFilter($event)\"></pfng-filter-results></div>`\n})\nexport class FilterComponent implements DoCheck, OnInit {\n  /**\n   * The filter config containing component properties\n   */\n  @Input() config: FilterConfig;\n\n  /**\n   * The event emitted when a filter has been changed\n   */\n  @Output('onChange') onChange = new EventEmitter();\n\n  /**\n   * The event emitted when a query (i.e., saved filter) has been deleted\n   */\n  @Output('onDelete') onDelete = new EventEmitter();\n\n  /**\n   * The event emitted when a field menu option is selected\n   */\n  @Output('onFieldSelect') onFilterSelect = new EventEmitter();\n\n  /**\n   * The event emitted when a filter has been changed\n   */\n  @Output('onSave') onSave = new EventEmitter();\n\n  /**\n   * The event emitted when the user types ahead in the query input field\n   */\n  @Output('onTypeAhead') onTypeAhead = new EventEmitter();\n\n  /**\n   * A reference to the underlying filter fields component\n   */\n  @ViewChild('filterFields') private filterFields: FilterFieldsComponent;\n\n  private defaultConfig = {\n    disabled: false\n  } as FilterConfig;\n  private prevConfig: FilterConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n\n    if (this.config && this.config.appliedFilters === undefined) {\n      this.config.appliedFilters = [];\n    }\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  // Actions\n\n  /**\n   * Handle add filter event\n   *\n   * @param $event The FilterEvent contining properties for this event\n   */\n  addFilter($event: FilterEvent): void {\n    let newFilter = {\n      field: $event.field,\n      query: $event.query,\n      value: $event.value\n    } as Filter;\n\n    if (!this.filterExists(newFilter)) {\n      if (newFilter.field.type === FilterType.SELECT) {\n        this.enforceSingleSelect(newFilter);\n      }\n      this.config.appliedFilters.push(newFilter);\n      $event.appliedFilters = this.config.appliedFilters;\n      this.onChange.emit($event);\n    }\n  }\n\n  /**\n   * Handle clear filter event\n   *\n   * @param $event An array of current Filter objects\n   */\n  clearFilter($event: Filter[]): void {\n    this.config.appliedFilters = $event;\n    this.onChange.emit({\n      appliedFilters: $event\n    } as FilterEvent);\n  }\n\n  /**\n   * Handle delete query (i.e., saved filter) event\n   *\n   * @param $event The FilterEvent contining properties for this event\n   */\n  deleteQuery($event: FilterEvent): void {\n    this.onDelete.emit($event);\n  }\n\n  /**\n   * Handle filter field selected event\n   *\n   * @param $event The FilterEvent contining properties for this event\n   */\n  fieldSelected($event: FilterEvent): void {\n    this.onFilterSelect.emit($event);\n  }\n\n  /**\n   * Reset current field\n   */\n  resetCurrentField(): void {\n    this.filterFields.reset();\n  }\n\n  /**\n   * Handle save filter event\n   *\n   * @param $event An array of current Filter objects\n   */\n  saveFilter($event: FilterEvent): void {\n    this.onSave.emit($event);\n  }\n\n  /**\n   * Handle type ahead event\n   *\n   * @param $event The FilterEvent contining properties for this event\n   */\n  typeAhead($event: FilterEvent) {\n    this.onTypeAhead.emit($event);\n  }\n\n  // Private\n\n  private enforceSingleSelect(filter: Filter): void {\n    remove(this.config.appliedFilters, { title: filter.field.title });\n  }\n\n  private filterExists(filter: Filter): boolean {\n    let foundFilter = find(this.config.appliedFilters, {\n      field: filter.field,\n      value: filter.value\n    });\n    return foundFilter !== undefined;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}