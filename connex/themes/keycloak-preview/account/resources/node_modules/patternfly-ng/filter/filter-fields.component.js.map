{"version":3,"file":"filter-fields.component.js","sourceRoot":"","sources":["../../../build/src/app/filter/filter-fields.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual } from 'lodash';\n\nimport { FilterConfig } from './filter-config';\nimport { FilterEvent } from './filter-event';\nimport { FilterField } from './filter-field';\nimport { FilterQuery } from './filter-query';\n\n/**\n * Component for the filter query field and filter query dropdown\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-filter-fields',\n  template: `<div class=\"filter-pf filter-fields\"><div class=\"input-group form-group\"><div class=\"input-group-btn\" dropdown><button type=\"button\" class=\"btn btn-default filter-fields dropdown-toggle\" dropdownToggle tooltip=\"Filter by\" placement=\"{{config?.tooltipPlacement}}\" [disabled]=\"config.disabled === true\">{{currentField?.title}} <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngFor=\"let field of config?.fields\" [ngClass]=\"{'disabled': isFieldDisabled(field), 'divider dropdown-divider': field.separator}\"><a class=\"filter-field dropdown-item\" href=\"javascript:void(0);\" role=\"menuitem\" tabindex=\"-1\" (click)=\"selectField(field)\" *ngIf=\"!field?.separator && !isFieldDisabled(field)\">{{field?.title}}</a> <a class=\"filter-field dropdown-item\" href=\"javascript:void(0);\" role=\"menuitem\" onclick=\"return false;\" *ngIf=\"!field?.separator && isFieldDisabled(field)\">{{field?.title}}</a></li></ul></div><div *ngIf=\"!currentField?.type || currentField?.type === 'text' || currentField.type === 'default'\"><input class=\"form-control\" type=\"{{currentField?.type}}\" [(ngModel)]=\"currentValue\" placeholder=\"{{currentField?.placeholder}}\" [disabled]=\"config.disabled === true\" (keypress)=\"fieldInputKeyPress($event)\"></div><div *ngIf=\"currentField?.type === 'select'\"><div class=\"btn-group bootstrap-select form-control filter-select\" dropdown><button type=\"button\" class=\"btn btn-default dropdown-toggle\" dropdownToggle [disabled]=\"config.disabled === true\"><span class=\"filter-option pull-left\">{{currentValue || currentField?.placeholder}}</span> <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngIf=\"currentField?.placeholder\"><a class=\"dropdown-item\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"selectQuery()\">{{currentField?.placeholder}}</a></li><li role=\"menuitem\" *ngFor=\"let query of currentField?.queries\" [ngClass]=\"{'selected': query?.value === currentValue, 'divider dropdown-divider': query?.separator}\"><a class=\"dropdown-item\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"selectQuery(query)\" *ngIf=\"!query?.separator\"><span class=\"{{query?.iconStyleClass}}\" *ngIf=\"query?.iconStyleClass\"></span> <img class=\"avatar\" [attr.src]=\"query?.imageUrl\" *ngIf=\"query?.imageUrl\"> {{query.value}}</a></li></ul></div></div><div *ngIf=\"currentField?.type === 'typeahead'\"><div class=\"btn-group bootstrap-select form-control filter-select\" *ngIf=\"config.disabled === true\"><div class=\"pull-left typeahead-input-container disabled\"><input class=\"form-control\" type=\"text\" placeholder=\"{{currentField?.placeholder}}\" [disabled]=\"config.disabled === true\"> <span class=\"caret\"></span></div></div><div class=\"btn-group bootstrap-select form-control filter-select\" dropdown (isOpenChange)=\"hideDeleteConfirm($event)\" *ngIf=\"config.disabled !== true\"><div class=\"pull-left typeahead-input-container dropdown-toggle\" dropdownToggle><input #queryInput class=\"form-control\" type=\"text\" placeholder=\"{{currentField?.placeholder}}\" [(ngModel)]=\"currentValue\" (ngModelChange)=\"queryInputChange($event)\"> <span (click)=\"queryInput.focus()\" class=\"caret\"></span></div><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngIf=\"currentField.placeholder\"><a class=\"dropdown-item\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"selectQuery()\">{{currentField?.placeholder}}</a></li><li role=\"menuitem\" *ngFor=\"let query of currentField?.queries\" [ngClass]=\"{'selected': query.value === currentValue,\n                          'divider dropdown-divider': query?.separator,\n                          'pfng-filter-delete-wrapper': query?.showDelete}\"><div class=\"pfng-filter-delete-slide\" [ngClass]=\"{'slide-in': query?.showDeleteConfirm}\" *ngIf=\"query?.showDelete\"><span class=\"pfng-filter-delete-text\">Delete filter?</span> <span class=\"pfng-filter-delete-confirm close\"><a class=\"padding-right-5\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"deleteQueryConfirm($event, query)\"><span class=\"fa fa-check\"></span> </a></span><span class=\"pfng-filter-delete-confirm close\"><a class=\"padding-right-5\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"deleteQueryCancel($event, query)\"><span class=\"fa fa-remove\"></span></a></span></div><a #blurable class=\"dropdown-item\" href=\"javascript:void(0);\" tabindex=\"-1\" (click)=\"selectQuery(query)\" *ngIf=\"!query?.separator\"><span class=\"pfng-filter-delete close\" *ngIf=\"query?.showDelete\"><a href=\"javascript:void(0);\" tabindex=\"-1\" [ngClass]=\"{'hidden': query?.showDeleteConfirm}\" (click)=\"deleteQuery($event, query, blurable)\"><span class=\"pficon pficon-remove\"></span> </a></span><span class=\"{{query?.iconStyleClass}}\" *ngIf=\"query?.iconStyleClass\"></span> <img class=\"avatar\" [attr.src]=\"query?.imageUrl\" *ngIf=\"query?.imageUrl\"> <span [innerHTML]=\"query.value | truncate: 20 | searchHighlight: queryInput.value\"></span></a></li></ul></div></div></div></div>`\n})\nexport class FilterFieldsComponent implements DoCheck, OnInit {\n  /**\n   * The filter config containing component properties\n   */\n  @Input() config: FilterConfig;\n\n  /**\n   * The event emitted when a filter has been added\n   */\n  @Output('onAdd') onAdd = new EventEmitter();\n\n  /**\n   * The event emitted when a saved filter has been deleted\n   */\n  @Output('onDelete') onDelete = new EventEmitter();\n\n  /**\n   * The event emitted when a field menu option is selected\n   */\n  @Output('onFieldSelect') onFieldSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the user types ahead in the query input field\n   */\n  @Output('onTypeAhead') onTypeAhead = new EventEmitter();\n\n  private _currentField: FilterField;\n  private _currentValue: string;\n  private defaultConfig = {\n    disabled: false\n  } as FilterConfig;\n  private prevConfig: FilterConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   * Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   * Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n\n    if (this.config && this.config.fields === undefined) {\n      this.config.fields = [];\n    }\n    if (this.config && this.config.tooltipPlacement === undefined) {\n      this.config.tooltipPlacement = 'top';\n    }\n    this.initCurrentField();\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  /**\n   * Initialize current field and value\n   */\n  protected initCurrentField(): void {\n    let fieldFound: boolean = false;\n    if (this._currentField !== undefined) {\n      this.config.fields.forEach((nextField) => {\n        if (nextField.id === this._currentField.id) {\n          fieldFound = true;\n          return;\n        }\n      });\n    }\n    if (!fieldFound) {\n      this._currentField = this.config.fields[0];\n      this._currentValue = null;\n    }\n    if (this._currentValue === undefined) {\n      this._currentValue = null;\n    }\n  }\n\n  /**\n   * Reset current field and value\n   */\n  reset(): void {\n    this._currentField = undefined;\n    this.initCurrentField();\n  }\n\n  // Accessors\n\n  /**\n   * Get the current filter field\n   *\n   * @returns {FilterField} The current filter field\n   */\n  get currentField(): FilterField {\n    return this._currentField;\n  }\n\n  /**\n   * Get the current filter field value\n   *\n   * @returns {string} The current filter field value\n   */\n  protected get currentValue(): string {\n    return this._currentValue;\n  }\n\n  /**\n   * Set the current filter field value\n   *\n   * @param val The current filter field value\n   */\n  protected set currentValue(val: string) {\n    this._currentValue = val;\n  }\n\n  // Private\n\n  private deleteQuery($event: MouseEvent, filterQuery: FilterQuery, el: HTMLElement): void {\n    // Unset focus\n    if (el !== undefined) {\n      el.blur();\n    }\n\n    // Close previous open confirmation\n    this.hideDeleteConfirm(false);\n\n    // Show delete query confirmation\n    (filterQuery as any).showDeleteConfirm = true;\n\n    // Menu should remain open\n    $event.stopPropagation();\n  }\n\n  private deleteQueryCancel($event: MouseEvent, filterQuery: FilterQuery): void {\n    // Hide delete query confirmation\n    (filterQuery as any).showDeleteConfirm = false;\n\n    // Menu should remain open\n    $event.stopPropagation();\n  }\n\n  private deleteQueryConfirm($event: MouseEvent, filterQuery: FilterQuery): void {\n    // Hide delete query confirmation\n    (filterQuery as any).showDeleteConfirm = false;\n\n    // Menu should remain open\n    if (this._currentField.queries.length > 1) {\n      $event.stopPropagation();\n    }\n    this.onDelete.emit({\n      field: this._currentField,\n      query: filterQuery,\n      value: filterQuery.value\n    } as FilterEvent);\n    this._currentValue = null;\n  }\n\n  private fieldInputKeyPress($event: KeyboardEvent): void {\n    if ($event.which === 13 && this._currentValue && this._currentValue.length > 0) {\n      this.onAdd.emit({\n        field: this._currentField,\n        value: this._currentValue\n      } as FilterEvent);\n      this._currentValue = undefined;\n    }\n  }\n\n  // Hide all delete confirm\n  private hideDeleteConfirm(isOpen: boolean): void {\n    this._currentField.queries.forEach(query => {\n      (query as any).showDeleteConfirm = false;\n    });\n  }\n\n  private isFieldDisabled(field: FilterField): boolean {\n    if (field.type === undefined || field.type === 'text') {\n      return false;\n    }\n    return (field.queries === undefined || field.queries.length === 0);\n  }\n\n  private queryInputChange(value: string) {\n    this.onTypeAhead.emit({\n      field: this._currentField,\n      value: this._currentValue\n    } as FilterEvent);\n  }\n\n  private selectField(field: FilterField): void {\n    this._currentField = field;\n    this._currentValue = null;\n    this.onFieldSelect.emit({\n      field: this._currentField,\n      value: this._currentValue\n    } as FilterEvent);\n  }\n\n  private selectQuery(filterQuery: FilterQuery): void {\n    this.onAdd.emit({\n      field: this._currentField,\n      query: filterQuery,\n      value: filterQuery.value\n    } as FilterEvent);\n    this._currentValue = null;\n  }\n\n  private showDelete(): boolean {\n    let result = false;\n    this._currentField.queries.forEach(query => {\n      if (query.showDelete === true) {\n        result = true;\n        return;\n      }\n    });\n    return result;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}