{"version":3,"file":"wizard-base.js","sourceRoot":"","sources":["../../../build/src/app/wizard/wizard-base.ts"],"names":[],"mappings":"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","sourcesContent":["import { WizardStep } from './wizard-step';\n\nimport { find } from 'lodash';\n\n/**\n * A base class with common functionality for wizard and wizard-step\n */\nexport abstract class WizardBase {\n  private _selectedStep: WizardStep;\n  private _steps: WizardStep[] = [];\n\n  /**\n   * The default constructor\n   */\n  constructor() {}\n\n  // Accessors\n\n  /**\n   * Returns the selected wizard step or substep\n   *\n   * @returns {WizardStep} The wizard step or substep\n   */\n  get selectedStep(): WizardStep {\n    return this._selectedStep;\n  }\n\n  /**\n   * Returns the selected wizard step or substep number\n   *\n   * @returns {number} The step index\n   */\n  get selectedStepIndex(): number {\n    // Retrieve selected step number\n    return this.stepIndex(this.selectedStep) + 1;\n  }\n\n  /**\n   * Set the selected wizard step or substep for this component\n   *\n   * @param {WizardStep} step The wizard step or substep\n   */\n  set selectedStep(step: WizardStep) {\n    this._selectedStep = step;\n  }\n\n  /**\n   * Returns the wizard steps or substeps for this component\n   *\n   * @returns {WizardStep[]} The wizard steps or substeps\n   */\n  get steps(): WizardStep[] {\n    return this._steps;\n  }\n\n  /**\n   * Set the wizard steps or substeps for this component\n   *\n   * @param {WizardStep[]} steps The wizard steps or substeps\n   */\n  set steps(steps: WizardStep[]) {\n    this._steps = steps;\n  }\n\n  // Methods\n\n  /**\n   * Add a wizard step or substep to this component\n   *\n   * @param {WizardStep} step The wizard step or substep to add\n   */\n  addStep(step: WizardStep): void {\n    // Insert the step into step array\n    let insertBefore = find(this.steps, (nextStep) => {\n      return nextStep.config.priority > step.config.priority;\n    });\n    if (insertBefore) {\n      this.steps.splice(this.steps.indexOf(insertBefore), 0, step);\n    } else {\n      this.steps.push(step);\n    }\n  }\n\n  /**\n   * Returns only enabled wizard steps\n   *\n   * @returns {WizardStep[]} The wizard stepd or substepd\n   */\n  protected getEnabledSteps(): WizardStep[] {\n    return this.steps.filter((step: WizardStep) => {\n      return (step.config.disabled !== true);\n    });\n  }\n\n  /**\n   * Returns the step index for the given wizard step or substep\n   *\n   * @param {WizardStep} step The wizard step or substep\n   * @returns {number} The step number\n   */\n  getStepIndex(step: WizardStep): number {\n    return this.stepIndex(step) + 1;\n  }\n\n  /**\n   * Returns the wizard step or substep for the given title\n   *\n   * @param {string} title The title to find\n   * @returns {WizardStep} The wizard step or substep\n   */\n  protected stepByTitle(title: string): WizardStep {\n    let foundStep;\n    this.getEnabledSteps().forEach((step: WizardStep) => {\n      if (step.config.title === title) {\n        foundStep = step;\n      }\n    });\n    return foundStep;\n  }\n\n  /**\n   * Returns the index for the given wizard step or substep\n   *\n   * @param {WizardStep} step The wizard step or substep\n   * @returns {number} The wizard step or substep index\n   */\n  protected stepIndex(step: WizardStep): number {\n    let idx = 0;\n    let res = -1;\n    this.getEnabledSteps().forEach((currStep) => {\n      if (currStep === step) {\n        res = idx;\n      }\n      idx++;\n    });\n    return res;\n  }\n\n  /**\n   * Unselect all wizard steps and substeps\n   */\n  protected unselectAll(): void {\n    // Traverse steps array and set each \"selected\" property to false\n    this.getEnabledSteps().forEach((step: WizardStep) => {\n      step.selected = false;\n    });\n    // Set selectedStep variable to null\n    this.selectedStep = null;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}