{"version":3,"file":"wizard-step.js","sourceRoot":"","sources":["../../../build/src/app/wizard/wizard-step.ts"],"names":[],"mappings":"AAMA;;GAEG;AACH;IAAA;IAgFA,CAAC;IAAD,iBAAC;AAAD,CAAC,AAhFD,IAgFC","sourcesContent":["import {\n  TemplateRef\n} from '@angular/core';\n\nimport { WizardStepConfig } from './wizard-step-config';\n\n/**\n * Wizard step\n */\nexport class WizardStep {\n  /**\n   * The wizard step config containing component properties\n   */\n  config: WizardStepConfig;\n\n  /**\n   * Returns the step number to be displayed for the given wizard step or substep.\n   */\n  getDisplayNumber?: Function;\n\n  /**\n   * Returns only wizard steps with review templates.\n   */\n  getReviewSteps?: Function;\n\n  /**\n   * Navigate to the first wizard substep.\n   */\n  goToFirstStep?: Function;\n\n  /**\n   * Navigate to the last wizard substep.\n   */\n  goToLastStep?: Function;\n\n  /**\n   * Navigate to the next wizard step or substep\n   */\n  goToNextStep?: Function;\n\n  /**\n   * Navigate to the previous wizard step or substep\n   */\n  goToPreviousStep?: Function;\n\n  /**\n   * Indicates that this wizard step has substeps.\n   */\n  hasSubsteps?: boolean;\n\n  /**\n   * Called when the next button has been selected.\n   */\n  next?: Function;\n\n  /**\n   * Indicates that the next button is enabled when the wizard step is displayed.\n   */\n  nextEnabled?: boolean;\n\n  /**\n   * Called when the previous button has been selected.\n   */\n  previous?: Function;\n\n  /**\n   * Indicates that the previous button is enabled when the wizard step is displayed.\n   */\n  previousEnabled?: boolean;\n\n  /**\n   * The wizard step template used for the review details screen\n   */\n  reviewTemplate: TemplateRef<any>;\n\n  /**\n   * Indicates that this wizard step or substep is selected\n   */\n  selected: boolean;\n\n  /**\n   * Returns the selected wizard step or substep index.\n   */\n  selectedStepIndex?: number;\n\n  /**\n   * Emits an event when a wizard step or substep is shown\n   */\n  show: Function;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}